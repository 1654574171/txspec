#pragma once

#include <Register.grpc.pb.h>
#include <common/data_types/key_management/ErrorType.h>
#include <common/data_types/request_processor/ErrorType.h>

#include <KeyManagementEnclave_u.h>


//cosmos register
class RegisterServiceImpl final : public request_proto::Register::Service
{
    private:
        sgx_enclave_id_t eid;
    
    private:
       // Example of usage:
    // Params: ServerContext: the grpc connetion context between client and server;
    //         RegisterRequest: the registration request contains trgistration information including nonce.
    // Return: RegisterResponse: the registration response contains ecc_pbkey generated by enclave and iasreport.
        virtual grpc::Status RegisterRegulatoryService(::grpc::ServerContext* context, 
                                                       const request_proto::RegisterRequest* request, 
                                                       request_proto::RegisterResponse* response) override;

        KEYMANAGEMENT_ERROR_CODE StartRemoteAttestationCosmos(request_proto::RegisterResponse *const register_resp);


    public:
        RegisterServiceImpl(sgx_enclave_id_t id) : eid(id) {}
    
};