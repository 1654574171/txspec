// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Firehose.proto

#include "Firehose.pb.h"
#include "Firehose.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace reg_tx_collector {

static const char* TxCollectorService_method_names[] = {
  "/reg_tx_collector.TxCollectorService/SendRegTx",
};

std::unique_ptr< TxCollectorService::Stub> TxCollectorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TxCollectorService::Stub> stub(new TxCollectorService::Stub(channel));
  return stub;
}

TxCollectorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendRegTx_(TxCollectorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TxCollectorService::Stub::SendRegTx(::grpc::ClientContext* context, const ::reg_tx_collector::Request& request, ::reg_tx_collector::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::reg_tx_collector::Request, ::reg_tx_collector::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendRegTx_, context, request, response);
}

void TxCollectorService::Stub::experimental_async::SendRegTx(::grpc::ClientContext* context, const ::reg_tx_collector::Request* request, ::reg_tx_collector::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::reg_tx_collector::Request, ::reg_tx_collector::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendRegTx_, context, request, response, std::move(f));
}

void TxCollectorService::Stub::experimental_async::SendRegTx(::grpc::ClientContext* context, const ::reg_tx_collector::Request* request, ::reg_tx_collector::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendRegTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::reg_tx_collector::Reply>* TxCollectorService::Stub::PrepareAsyncSendRegTxRaw(::grpc::ClientContext* context, const ::reg_tx_collector::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::reg_tx_collector::Reply, ::reg_tx_collector::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendRegTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::reg_tx_collector::Reply>* TxCollectorService::Stub::AsyncSendRegTxRaw(::grpc::ClientContext* context, const ::reg_tx_collector::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendRegTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

TxCollectorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TxCollectorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TxCollectorService::Service, ::reg_tx_collector::Request, ::reg_tx_collector::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TxCollectorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::reg_tx_collector::Request* req,
             ::reg_tx_collector::Reply* resp) {
               return service->SendRegTx(ctx, req, resp);
             }, this)));
}

TxCollectorService::Service::~Service() {
}

::grpc::Status TxCollectorService::Service::SendRegTx(::grpc::ServerContext* context, const ::reg_tx_collector::Request* request, ::reg_tx_collector::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace reg_tx_collector

