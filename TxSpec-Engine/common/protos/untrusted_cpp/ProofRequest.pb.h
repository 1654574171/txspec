// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProofRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProofRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProofRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProofRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProofRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProofRequest_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ProofRequest_2eproto_metadata_getter(int index);
namespace request_proto {
class Attribute;
struct AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class ContractEvent;
struct ContractEventDefaultTypeInternal;
extern ContractEventDefaultTypeInternal _ContractEvent_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class ProofRequest;
struct ProofRequestDefaultTypeInternal;
extern ProofRequestDefaultTypeInternal _ProofRequest_default_instance_;
class TxMetaData;
struct TxMetaDataDefaultTypeInternal;
extern TxMetaDataDefaultTypeInternal _TxMetaData_default_instance_;
}  // namespace request_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::request_proto::Attribute* Arena::CreateMaybeMessage<::request_proto::Attribute>(Arena*);
template<> ::request_proto::ContractEvent* Arena::CreateMaybeMessage<::request_proto::ContractEvent>(Arena*);
template<> ::request_proto::Data* Arena::CreateMaybeMessage<::request_proto::Data>(Arena*);
template<> ::request_proto::Event* Arena::CreateMaybeMessage<::request_proto::Event>(Arena*);
template<> ::request_proto::ProofRequest* Arena::CreateMaybeMessage<::request_proto::ProofRequest>(Arena*);
template<> ::request_proto::TxMetaData* Arena::CreateMaybeMessage<::request_proto::TxMetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace request_proto {

// ===================================================================

class Attribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Attribute) */ {
 public:
  inline Attribute() : Attribute(nullptr) {}
  virtual ~Attribute();
  explicit constexpr Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribute* New() const final {
    return CreateMaybeMessage<Attribute>(nullptr);
  }

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Attribute";
  }
  protected:
  explicit Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofRequest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofRequest_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofRequest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kEventNameFieldNumber = 1,
  };
  // repeated .request_proto.Attribute attributes = 2;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::request_proto::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Attribute >*
      mutable_attributes();
  private:
  const ::request_proto::Attribute& _internal_attributes(int index) const;
  ::request_proto::Attribute* _internal_add_attributes();
  public:
  const ::request_proto::Attribute& attributes(int index) const;
  ::request_proto::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Attribute >&
      attributes() const;

  // string EventName = 1;
  void clear_eventname();
  const std::string& eventname() const;
  void set_eventname(const std::string& value);
  void set_eventname(std::string&& value);
  void set_eventname(const char* value);
  void set_eventname(const char* value, size_t size);
  std::string* mutable_eventname();
  std::string* release_eventname();
  void set_allocated_eventname(std::string* eventname);
  private:
  const std::string& _internal_eventname() const;
  void _internal_set_eventname(const std::string& value);
  std::string* _internal_mutable_eventname();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Attribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofRequest_2eproto;
};
// -------------------------------------------------------------------

class ContractEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.ContractEvent) */ {
 public:
  inline ContractEvent() : ContractEvent(nullptr) {}
  virtual ~ContractEvent();
  explicit constexpr ContractEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractEvent(const ContractEvent& from);
  ContractEvent(ContractEvent&& from) noexcept
    : ContractEvent() {
    *this = ::std::move(from);
  }

  inline ContractEvent& operator=(const ContractEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractEvent& operator=(ContractEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractEvent* internal_default_instance() {
    return reinterpret_cast<const ContractEvent*>(
               &_ContractEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContractEvent& a, ContractEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractEvent* New() const final {
    return CreateMaybeMessage<ContractEvent>(nullptr);
  }

  ContractEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractEvent& from);
  void MergeFrom(const ContractEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.ContractEvent";
  }
  protected:
  explicit ContractEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofRequest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kContractIDFieldNumber = 1,
  };
  // repeated .request_proto.Event events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::request_proto::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Event >*
      mutable_events();
  private:
  const ::request_proto::Event& _internal_events(int index) const;
  ::request_proto::Event* _internal_add_events();
  public:
  const ::request_proto::Event& events(int index) const;
  ::request_proto::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Event >&
      events() const;

  // string ContractID = 1;
  void clear_contractid();
  const std::string& contractid() const;
  void set_contractid(const std::string& value);
  void set_contractid(std::string&& value);
  void set_contractid(const char* value);
  void set_contractid(const char* value, size_t size);
  std::string* mutable_contractid();
  std::string* release_contractid();
  void set_allocated_contractid(std::string* contractid);
  private:
  const std::string& _internal_contractid() const;
  void _internal_set_contractid(const std::string& value);
  std::string* _internal_mutable_contractid();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.ContractEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Event > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofRequest_2eproto;
};
// -------------------------------------------------------------------

class TxMetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.TxMetaData) */ {
 public:
  inline TxMetaData() : TxMetaData(nullptr) {}
  virtual ~TxMetaData();
  explicit constexpr TxMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxMetaData(const TxMetaData& from);
  TxMetaData(TxMetaData&& from) noexcept
    : TxMetaData() {
    *this = ::std::move(from);
  }

  inline TxMetaData& operator=(const TxMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMetaData& operator=(TxMetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxMetaData* internal_default_instance() {
    return reinterpret_cast<const TxMetaData*>(
               &_TxMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TxMetaData& a, TxMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxMetaData* New() const final {
    return CreateMaybeMessage<TxMetaData>(nullptr);
  }

  TxMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxMetaData& from);
  void MergeFrom(const TxMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.TxMetaData";
  }
  protected:
  explicit TxMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofRequest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // bytes fromAddress = 1;
  void clear_fromaddress();
  const std::string& fromaddress() const;
  void set_fromaddress(const std::string& value);
  void set_fromaddress(std::string&& value);
  void set_fromaddress(const char* value);
  void set_fromaddress(const void* value, size_t size);
  std::string* mutable_fromaddress();
  std::string* release_fromaddress();
  void set_allocated_fromaddress(std::string* fromaddress);
  private:
  const std::string& _internal_fromaddress() const;
  void _internal_set_fromaddress(const std::string& value);
  std::string* _internal_mutable_fromaddress();
  public:

  // bytes ToAddress = 2;
  void clear_toaddress();
  const std::string& toaddress() const;
  void set_toaddress(const std::string& value);
  void set_toaddress(std::string&& value);
  void set_toaddress(const char* value);
  void set_toaddress(const void* value, size_t size);
  std::string* mutable_toaddress();
  std::string* release_toaddress();
  void set_allocated_toaddress(std::string* toaddress);
  private:
  const std::string& _internal_toaddress() const;
  void _internal_set_toaddress(const std::string& value);
  std::string* _internal_mutable_toaddress();
  public:

  // uint64 Value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.TxMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toaddress_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofRequest_2eproto;
};
// -------------------------------------------------------------------

class Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  virtual ~Data();
  explicit constexpr Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofRequest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // repeated .request_proto.ContractEvent events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::request_proto::ContractEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ContractEvent >*
      mutable_events();
  private:
  const ::request_proto::ContractEvent& _internal_events(int index) const;
  ::request_proto::ContractEvent* _internal_add_events();
  public:
  const ::request_proto::ContractEvent& events(int index) const;
  ::request_proto::ContractEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ContractEvent >&
      events() const;

  // .request_proto.TxMetaData meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::request_proto::TxMetaData& meta() const;
  ::request_proto::TxMetaData* release_meta();
  ::request_proto::TxMetaData* mutable_meta();
  void set_allocated_meta(::request_proto::TxMetaData* meta);
  private:
  const ::request_proto::TxMetaData& _internal_meta() const;
  ::request_proto::TxMetaData* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::request_proto::TxMetaData* meta);
  ::request_proto::TxMetaData* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:request_proto.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ContractEvent > events_;
  ::request_proto::TxMetaData* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofRequest_2eproto;
};
// -------------------------------------------------------------------

class ProofRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.ProofRequest) */ {
 public:
  inline ProofRequest() : ProofRequest(nullptr) {}
  virtual ~ProofRequest();
  explicit constexpr ProofRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProofRequest(const ProofRequest& from);
  ProofRequest(ProofRequest&& from) noexcept
    : ProofRequest() {
    *this = ::std::move(from);
  }

  inline ProofRequest& operator=(const ProofRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofRequest& operator=(ProofRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProofRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofRequest* internal_default_instance() {
    return reinterpret_cast<const ProofRequest*>(
               &_ProofRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProofRequest& a, ProofRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProofRequest* New() const final {
    return CreateMaybeMessage<ProofRequest>(nullptr);
  }

  ProofRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProofRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProofRequest& from);
  void MergeFrom(const ProofRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.ProofRequest";
  }
  protected:
  explicit ProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofRequest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainTypeFieldNumber = 1,
    kChainIDFieldNumber = 2,
    kTxHashFieldNumber = 4,
    kOriginalDataFieldNumber = 7,
    kDataFieldNumber = 3,
    kHeightFieldNumber = 5,
    kTxIndexFieldNumber = 6,
  };
  // string ChainType = 1;
  void clear_chaintype();
  const std::string& chaintype() const;
  void set_chaintype(const std::string& value);
  void set_chaintype(std::string&& value);
  void set_chaintype(const char* value);
  void set_chaintype(const char* value, size_t size);
  std::string* mutable_chaintype();
  std::string* release_chaintype();
  void set_allocated_chaintype(std::string* chaintype);
  private:
  const std::string& _internal_chaintype() const;
  void _internal_set_chaintype(const std::string& value);
  std::string* _internal_mutable_chaintype();
  public:

  // string ChainID = 2;
  void clear_chainid();
  const std::string& chainid() const;
  void set_chainid(const std::string& value);
  void set_chainid(std::string&& value);
  void set_chainid(const char* value);
  void set_chainid(const char* value, size_t size);
  std::string* mutable_chainid();
  std::string* release_chainid();
  void set_allocated_chainid(std::string* chainid);
  private:
  const std::string& _internal_chainid() const;
  void _internal_set_chainid(const std::string& value);
  std::string* _internal_mutable_chainid();
  public:

  // bytes TxHash = 4;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const void* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // bytes OriginalData = 7;
  void clear_originaldata();
  const std::string& originaldata() const;
  void set_originaldata(const std::string& value);
  void set_originaldata(std::string&& value);
  void set_originaldata(const char* value);
  void set_originaldata(const void* value, size_t size);
  std::string* mutable_originaldata();
  std::string* release_originaldata();
  void set_allocated_originaldata(std::string* originaldata);
  private:
  const std::string& _internal_originaldata() const;
  void _internal_set_originaldata(const std::string& value);
  std::string* _internal_mutable_originaldata();
  public:

  // .request_proto.Data Data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::request_proto::Data& data() const;
  ::request_proto::Data* release_data();
  ::request_proto::Data* mutable_data();
  void set_allocated_data(::request_proto::Data* data);
  private:
  const ::request_proto::Data& _internal_data() const;
  ::request_proto::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::request_proto::Data* data);
  ::request_proto::Data* unsafe_arena_release_data();

  // uint64 Height = 5;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 TxIndex = 6;
  void clear_txindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 txindex() const;
  void set_txindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txindex() const;
  void _internal_set_txindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.ProofRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chaintype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originaldata_;
  ::request_proto::Data* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Attribute

// string Key = 1;
inline void Attribute::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Attribute::key() const {
  // @@protoc_insertion_point(field_get:request_proto.Attribute.Key)
  return _internal_key();
}
inline void Attribute::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:request_proto.Attribute.Key)
}
inline std::string* Attribute::mutable_key() {
  // @@protoc_insertion_point(field_mutable:request_proto.Attribute.Key)
  return _internal_mutable_key();
}
inline const std::string& Attribute::_internal_key() const {
  return key_.Get();
}
inline void Attribute::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attribute::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Attribute.Key)
}
inline void Attribute::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Attribute.Key)
}
inline void Attribute::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Attribute.Key)
}
inline std::string* Attribute::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attribute::release_key() {
  // @@protoc_insertion_point(field_release:request_proto.Attribute.Key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attribute::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Attribute.Key)
}

// string Value = 2;
inline void Attribute::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Attribute::value() const {
  // @@protoc_insertion_point(field_get:request_proto.Attribute.Value)
  return _internal_value();
}
inline void Attribute::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:request_proto.Attribute.Value)
}
inline std::string* Attribute::mutable_value() {
  // @@protoc_insertion_point(field_mutable:request_proto.Attribute.Value)
  return _internal_mutable_value();
}
inline const std::string& Attribute::_internal_value() const {
  return value_.Get();
}
inline void Attribute::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Attribute::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Attribute.Value)
}
inline void Attribute::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Attribute.Value)
}
inline void Attribute::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Attribute.Value)
}
inline std::string* Attribute::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Attribute::release_value() {
  // @@protoc_insertion_point(field_release:request_proto.Attribute.Value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Attribute.Value)
}

// -------------------------------------------------------------------

// Event

// string EventName = 1;
inline void Event::clear_eventname() {
  eventname_.ClearToEmpty();
}
inline const std::string& Event::eventname() const {
  // @@protoc_insertion_point(field_get:request_proto.Event.EventName)
  return _internal_eventname();
}
inline void Event::set_eventname(const std::string& value) {
  _internal_set_eventname(value);
  // @@protoc_insertion_point(field_set:request_proto.Event.EventName)
}
inline std::string* Event::mutable_eventname() {
  // @@protoc_insertion_point(field_mutable:request_proto.Event.EventName)
  return _internal_mutable_eventname();
}
inline const std::string& Event::_internal_eventname() const {
  return eventname_.Get();
}
inline void Event::_internal_set_eventname(const std::string& value) {
  
  eventname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Event::set_eventname(std::string&& value) {
  
  eventname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Event.EventName)
}
inline void Event::set_eventname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eventname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Event.EventName)
}
inline void Event::set_eventname(const char* value,
    size_t size) {
  
  eventname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Event.EventName)
}
inline std::string* Event::_internal_mutable_eventname() {
  
  return eventname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Event::release_eventname() {
  // @@protoc_insertion_point(field_release:request_proto.Event.EventName)
  return eventname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_eventname(std::string* eventname) {
  if (eventname != nullptr) {
    
  } else {
    
  }
  eventname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eventname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Event.EventName)
}

// repeated .request_proto.Attribute attributes = 2;
inline int Event::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Event::attributes_size() const {
  return _internal_attributes_size();
}
inline void Event::clear_attributes() {
  attributes_.Clear();
}
inline ::request_proto::Attribute* Event::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Event.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Attribute >*
Event::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Event.attributes)
  return &attributes_;
}
inline const ::request_proto::Attribute& Event::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::request_proto::Attribute& Event::attributes(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Event.attributes)
  return _internal_attributes(index);
}
inline ::request_proto::Attribute* Event::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::request_proto::Attribute* Event::add_attributes() {
  // @@protoc_insertion_point(field_add:request_proto.Event.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Attribute >&
Event::attributes() const {
  // @@protoc_insertion_point(field_list:request_proto.Event.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// ContractEvent

// string ContractID = 1;
inline void ContractEvent::clear_contractid() {
  contractid_.ClearToEmpty();
}
inline const std::string& ContractEvent::contractid() const {
  // @@protoc_insertion_point(field_get:request_proto.ContractEvent.ContractID)
  return _internal_contractid();
}
inline void ContractEvent::set_contractid(const std::string& value) {
  _internal_set_contractid(value);
  // @@protoc_insertion_point(field_set:request_proto.ContractEvent.ContractID)
}
inline std::string* ContractEvent::mutable_contractid() {
  // @@protoc_insertion_point(field_mutable:request_proto.ContractEvent.ContractID)
  return _internal_mutable_contractid();
}
inline const std::string& ContractEvent::_internal_contractid() const {
  return contractid_.Get();
}
inline void ContractEvent::_internal_set_contractid(const std::string& value) {
  
  contractid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ContractEvent::set_contractid(std::string&& value) {
  
  contractid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ContractEvent.ContractID)
}
inline void ContractEvent::set_contractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ContractEvent.ContractID)
}
inline void ContractEvent::set_contractid(const char* value,
    size_t size) {
  
  contractid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ContractEvent.ContractID)
}
inline std::string* ContractEvent::_internal_mutable_contractid() {
  
  return contractid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ContractEvent::release_contractid() {
  // @@protoc_insertion_point(field_release:request_proto.ContractEvent.ContractID)
  return contractid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractEvent::set_allocated_contractid(std::string* contractid) {
  if (contractid != nullptr) {
    
  } else {
    
  }
  contractid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ContractEvent.ContractID)
}

// repeated .request_proto.Event events = 2;
inline int ContractEvent::_internal_events_size() const {
  return events_.size();
}
inline int ContractEvent::events_size() const {
  return _internal_events_size();
}
inline void ContractEvent::clear_events() {
  events_.Clear();
}
inline ::request_proto::Event* ContractEvent::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.ContractEvent.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Event >*
ContractEvent::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.ContractEvent.events)
  return &events_;
}
inline const ::request_proto::Event& ContractEvent::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::request_proto::Event& ContractEvent::events(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.ContractEvent.events)
  return _internal_events(index);
}
inline ::request_proto::Event* ContractEvent::_internal_add_events() {
  return events_.Add();
}
inline ::request_proto::Event* ContractEvent::add_events() {
  // @@protoc_insertion_point(field_add:request_proto.ContractEvent.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Event >&
ContractEvent::events() const {
  // @@protoc_insertion_point(field_list:request_proto.ContractEvent.events)
  return events_;
}

// -------------------------------------------------------------------

// TxMetaData

// bytes fromAddress = 1;
inline void TxMetaData::clear_fromaddress() {
  fromaddress_.ClearToEmpty();
}
inline const std::string& TxMetaData::fromaddress() const {
  // @@protoc_insertion_point(field_get:request_proto.TxMetaData.fromAddress)
  return _internal_fromaddress();
}
inline void TxMetaData::set_fromaddress(const std::string& value) {
  _internal_set_fromaddress(value);
  // @@protoc_insertion_point(field_set:request_proto.TxMetaData.fromAddress)
}
inline std::string* TxMetaData::mutable_fromaddress() {
  // @@protoc_insertion_point(field_mutable:request_proto.TxMetaData.fromAddress)
  return _internal_mutable_fromaddress();
}
inline const std::string& TxMetaData::_internal_fromaddress() const {
  return fromaddress_.Get();
}
inline void TxMetaData::_internal_set_fromaddress(const std::string& value) {
  
  fromaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxMetaData::set_fromaddress(std::string&& value) {
  
  fromaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TxMetaData.fromAddress)
}
inline void TxMetaData::set_fromaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TxMetaData.fromAddress)
}
inline void TxMetaData::set_fromaddress(const void* value,
    size_t size) {
  
  fromaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TxMetaData.fromAddress)
}
inline std::string* TxMetaData::_internal_mutable_fromaddress() {
  
  return fromaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxMetaData::release_fromaddress() {
  // @@protoc_insertion_point(field_release:request_proto.TxMetaData.fromAddress)
  return fromaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxMetaData::set_allocated_fromaddress(std::string* fromaddress) {
  if (fromaddress != nullptr) {
    
  } else {
    
  }
  fromaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TxMetaData.fromAddress)
}

// bytes ToAddress = 2;
inline void TxMetaData::clear_toaddress() {
  toaddress_.ClearToEmpty();
}
inline const std::string& TxMetaData::toaddress() const {
  // @@protoc_insertion_point(field_get:request_proto.TxMetaData.ToAddress)
  return _internal_toaddress();
}
inline void TxMetaData::set_toaddress(const std::string& value) {
  _internal_set_toaddress(value);
  // @@protoc_insertion_point(field_set:request_proto.TxMetaData.ToAddress)
}
inline std::string* TxMetaData::mutable_toaddress() {
  // @@protoc_insertion_point(field_mutable:request_proto.TxMetaData.ToAddress)
  return _internal_mutable_toaddress();
}
inline const std::string& TxMetaData::_internal_toaddress() const {
  return toaddress_.Get();
}
inline void TxMetaData::_internal_set_toaddress(const std::string& value) {
  
  toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxMetaData::set_toaddress(std::string&& value) {
  
  toaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TxMetaData.ToAddress)
}
inline void TxMetaData::set_toaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TxMetaData.ToAddress)
}
inline void TxMetaData::set_toaddress(const void* value,
    size_t size) {
  
  toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TxMetaData.ToAddress)
}
inline std::string* TxMetaData::_internal_mutable_toaddress() {
  
  return toaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxMetaData::release_toaddress() {
  // @@protoc_insertion_point(field_release:request_proto.TxMetaData.ToAddress)
  return toaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxMetaData::set_allocated_toaddress(std::string* toaddress) {
  if (toaddress != nullptr) {
    
  } else {
    
  }
  toaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TxMetaData.ToAddress)
}

// uint64 Value = 3;
inline void TxMetaData::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxMetaData::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxMetaData::value() const {
  // @@protoc_insertion_point(field_get:request_proto.TxMetaData.Value)
  return _internal_value();
}
inline void TxMetaData::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void TxMetaData::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:request_proto.TxMetaData.Value)
}

// -------------------------------------------------------------------

// Data

// .request_proto.TxMetaData meta = 1;
inline bool Data::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool Data::has_meta() const {
  return _internal_has_meta();
}
inline void Data::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::request_proto::TxMetaData& Data::_internal_meta() const {
  const ::request_proto::TxMetaData* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::request_proto::TxMetaData&>(
      ::request_proto::_TxMetaData_default_instance_);
}
inline const ::request_proto::TxMetaData& Data::meta() const {
  // @@protoc_insertion_point(field_get:request_proto.Data.meta)
  return _internal_meta();
}
inline void Data::unsafe_arena_set_allocated_meta(
    ::request_proto::TxMetaData* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request_proto.Data.meta)
}
inline ::request_proto::TxMetaData* Data::release_meta() {
  
  ::request_proto::TxMetaData* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::request_proto::TxMetaData* Data::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:request_proto.Data.meta)
  
  ::request_proto::TxMetaData* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::request_proto::TxMetaData* Data::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::request_proto::TxMetaData>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::request_proto::TxMetaData* Data::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:request_proto.Data.meta)
  return _internal_mutable_meta();
}
inline void Data::set_allocated_meta(::request_proto::TxMetaData* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:request_proto.Data.meta)
}

// repeated .request_proto.ContractEvent events = 2;
inline int Data::_internal_events_size() const {
  return events_.size();
}
inline int Data::events_size() const {
  return _internal_events_size();
}
inline void Data::clear_events() {
  events_.Clear();
}
inline ::request_proto::ContractEvent* Data::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Data.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ContractEvent >*
Data::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Data.events)
  return &events_;
}
inline const ::request_proto::ContractEvent& Data::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::request_proto::ContractEvent& Data::events(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Data.events)
  return _internal_events(index);
}
inline ::request_proto::ContractEvent* Data::_internal_add_events() {
  return events_.Add();
}
inline ::request_proto::ContractEvent* Data::add_events() {
  // @@protoc_insertion_point(field_add:request_proto.Data.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ContractEvent >&
Data::events() const {
  // @@protoc_insertion_point(field_list:request_proto.Data.events)
  return events_;
}

// -------------------------------------------------------------------

// ProofRequest

// string ChainType = 1;
inline void ProofRequest::clear_chaintype() {
  chaintype_.ClearToEmpty();
}
inline const std::string& ProofRequest::chaintype() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofRequest.ChainType)
  return _internal_chaintype();
}
inline void ProofRequest::set_chaintype(const std::string& value) {
  _internal_set_chaintype(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofRequest.ChainType)
}
inline std::string* ProofRequest::mutable_chaintype() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofRequest.ChainType)
  return _internal_mutable_chaintype();
}
inline const std::string& ProofRequest::_internal_chaintype() const {
  return chaintype_.Get();
}
inline void ProofRequest::_internal_set_chaintype(const std::string& value) {
  
  chaintype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProofRequest::set_chaintype(std::string&& value) {
  
  chaintype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofRequest.ChainType)
}
inline void ProofRequest::set_chaintype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chaintype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ProofRequest.ChainType)
}
inline void ProofRequest::set_chaintype(const char* value,
    size_t size) {
  
  chaintype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofRequest.ChainType)
}
inline std::string* ProofRequest::_internal_mutable_chaintype() {
  
  return chaintype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProofRequest::release_chaintype() {
  // @@protoc_insertion_point(field_release:request_proto.ProofRequest.ChainType)
  return chaintype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofRequest::set_allocated_chaintype(std::string* chaintype) {
  if (chaintype != nullptr) {
    
  } else {
    
  }
  chaintype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chaintype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofRequest.ChainType)
}

// string ChainID = 2;
inline void ProofRequest::clear_chainid() {
  chainid_.ClearToEmpty();
}
inline const std::string& ProofRequest::chainid() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofRequest.ChainID)
  return _internal_chainid();
}
inline void ProofRequest::set_chainid(const std::string& value) {
  _internal_set_chainid(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofRequest.ChainID)
}
inline std::string* ProofRequest::mutable_chainid() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofRequest.ChainID)
  return _internal_mutable_chainid();
}
inline const std::string& ProofRequest::_internal_chainid() const {
  return chainid_.Get();
}
inline void ProofRequest::_internal_set_chainid(const std::string& value) {
  
  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProofRequest::set_chainid(std::string&& value) {
  
  chainid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofRequest.ChainID)
}
inline void ProofRequest::set_chainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ProofRequest.ChainID)
}
inline void ProofRequest::set_chainid(const char* value,
    size_t size) {
  
  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofRequest.ChainID)
}
inline std::string* ProofRequest::_internal_mutable_chainid() {
  
  return chainid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProofRequest::release_chainid() {
  // @@protoc_insertion_point(field_release:request_proto.ProofRequest.ChainID)
  return chainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofRequest::set_allocated_chainid(std::string* chainid) {
  if (chainid != nullptr) {
    
  } else {
    
  }
  chainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofRequest.ChainID)
}

// .request_proto.Data Data = 3;
inline bool ProofRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ProofRequest::has_data() const {
  return _internal_has_data();
}
inline void ProofRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::request_proto::Data& ProofRequest::_internal_data() const {
  const ::request_proto::Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::request_proto::Data&>(
      ::request_proto::_Data_default_instance_);
}
inline const ::request_proto::Data& ProofRequest::data() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofRequest.Data)
  return _internal_data();
}
inline void ProofRequest::unsafe_arena_set_allocated_data(
    ::request_proto::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request_proto.ProofRequest.Data)
}
inline ::request_proto::Data* ProofRequest::release_data() {
  
  ::request_proto::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::request_proto::Data* ProofRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:request_proto.ProofRequest.Data)
  
  ::request_proto::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::request_proto::Data* ProofRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::request_proto::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::request_proto::Data* ProofRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofRequest.Data)
  return _internal_mutable_data();
}
inline void ProofRequest::set_allocated_data(::request_proto::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofRequest.Data)
}

// bytes TxHash = 4;
inline void ProofRequest::clear_txhash() {
  txhash_.ClearToEmpty();
}
inline const std::string& ProofRequest::txhash() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofRequest.TxHash)
  return _internal_txhash();
}
inline void ProofRequest::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofRequest.TxHash)
}
inline std::string* ProofRequest::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofRequest.TxHash)
  return _internal_mutable_txhash();
}
inline const std::string& ProofRequest::_internal_txhash() const {
  return txhash_.Get();
}
inline void ProofRequest::_internal_set_txhash(const std::string& value) {
  
  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProofRequest::set_txhash(std::string&& value) {
  
  txhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofRequest.TxHash)
}
inline void ProofRequest::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ProofRequest.TxHash)
}
inline void ProofRequest::set_txhash(const void* value,
    size_t size) {
  
  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofRequest.TxHash)
}
inline std::string* ProofRequest::_internal_mutable_txhash() {
  
  return txhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProofRequest::release_txhash() {
  // @@protoc_insertion_point(field_release:request_proto.ProofRequest.TxHash)
  return txhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofRequest::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofRequest.TxHash)
}

// uint64 Height = 5;
inline void ProofRequest::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofRequest::height() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofRequest.Height)
  return _internal_height();
}
inline void ProofRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void ProofRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofRequest.Height)
}

// uint64 TxIndex = 6;
inline void ProofRequest::clear_txindex() {
  txindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofRequest::_internal_txindex() const {
  return txindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofRequest::txindex() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofRequest.TxIndex)
  return _internal_txindex();
}
inline void ProofRequest::_internal_set_txindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  txindex_ = value;
}
inline void ProofRequest::set_txindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txindex(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofRequest.TxIndex)
}

// bytes OriginalData = 7;
inline void ProofRequest::clear_originaldata() {
  originaldata_.ClearToEmpty();
}
inline const std::string& ProofRequest::originaldata() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofRequest.OriginalData)
  return _internal_originaldata();
}
inline void ProofRequest::set_originaldata(const std::string& value) {
  _internal_set_originaldata(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofRequest.OriginalData)
}
inline std::string* ProofRequest::mutable_originaldata() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofRequest.OriginalData)
  return _internal_mutable_originaldata();
}
inline const std::string& ProofRequest::_internal_originaldata() const {
  return originaldata_.Get();
}
inline void ProofRequest::_internal_set_originaldata(const std::string& value) {
  
  originaldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProofRequest::set_originaldata(std::string&& value) {
  
  originaldata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofRequest.OriginalData)
}
inline void ProofRequest::set_originaldata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  originaldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ProofRequest.OriginalData)
}
inline void ProofRequest::set_originaldata(const void* value,
    size_t size) {
  
  originaldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofRequest.OriginalData)
}
inline std::string* ProofRequest::_internal_mutable_originaldata() {
  
  return originaldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProofRequest::release_originaldata() {
  // @@protoc_insertion_point(field_release:request_proto.ProofRequest.OriginalData)
  return originaldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofRequest::set_allocated_originaldata(std::string* originaldata) {
  if (originaldata != nullptr) {
    
  } else {
    
  }
  originaldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originaldata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofRequest.OriginalData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProofRequest_2eproto
