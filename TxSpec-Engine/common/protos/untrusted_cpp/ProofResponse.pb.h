// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProofResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProofResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProofResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProofResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProofResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProofResponse_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ProofResponse_2eproto_metadata_getter(int index);
namespace request_proto {
class ErrorInfo;
struct ErrorInfoDefaultTypeInternal;
extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
class Proof;
struct ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class ProofResponse;
struct ProofResponseDefaultTypeInternal;
extern ProofResponseDefaultTypeInternal _ProofResponse_default_instance_;
class Receipt;
struct ReceiptDefaultTypeInternal;
extern ReceiptDefaultTypeInternal _Receipt_default_instance_;
}  // namespace request_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::request_proto::ErrorInfo* Arena::CreateMaybeMessage<::request_proto::ErrorInfo>(Arena*);
template<> ::request_proto::Proof* Arena::CreateMaybeMessage<::request_proto::Proof>(Arena*);
template<> ::request_proto::ProofResponse* Arena::CreateMaybeMessage<::request_proto::ProofResponse>(Arena*);
template<> ::request_proto::Receipt* Arena::CreateMaybeMessage<::request_proto::Receipt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace request_proto {

// ===================================================================

class ErrorInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.ErrorInfo) */ {
 public:
  inline ErrorInfo() : ErrorInfo(nullptr) {}
  virtual ~ErrorInfo();
  explicit constexpr ErrorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorInfo(const ErrorInfo& from);
  ErrorInfo(ErrorInfo&& from) noexcept
    : ErrorInfo() {
    *this = ::std::move(from);
  }

  inline ErrorInfo& operator=(const ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorInfo* internal_default_instance() {
    return reinterpret_cast<const ErrorInfo*>(
               &_ErrorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorInfo& a, ErrorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorInfo* New() const final {
    return CreateMaybeMessage<ErrorInfo>(nullptr);
  }

  ErrorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorInfo& from);
  void MergeFrom(const ErrorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.ErrorInfo";
  }
  protected:
  explicit ErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofResponse_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleFileNameFieldNumber = 2,
    kRuleFileIDFieldNumber = 3,
    kErrorStringFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // string ruleFileName = 2;
  void clear_rulefilename();
  const std::string& rulefilename() const;
  void set_rulefilename(const std::string& value);
  void set_rulefilename(std::string&& value);
  void set_rulefilename(const char* value);
  void set_rulefilename(const char* value, size_t size);
  std::string* mutable_rulefilename();
  std::string* release_rulefilename();
  void set_allocated_rulefilename(std::string* rulefilename);
  private:
  const std::string& _internal_rulefilename() const;
  void _internal_set_rulefilename(const std::string& value);
  std::string* _internal_mutable_rulefilename();
  public:

  // string ruleFileID = 3;
  void clear_rulefileid();
  const std::string& rulefileid() const;
  void set_rulefileid(const std::string& value);
  void set_rulefileid(std::string&& value);
  void set_rulefileid(const char* value);
  void set_rulefileid(const char* value, size_t size);
  std::string* mutable_rulefileid();
  std::string* release_rulefileid();
  void set_allocated_rulefileid(std::string* rulefileid);
  private:
  const std::string& _internal_rulefileid() const;
  void _internal_set_rulefileid(const std::string& value);
  std::string* _internal_mutable_rulefileid();
  public:

  // string errorString = 4;
  void clear_errorstring();
  const std::string& errorstring() const;
  void set_errorstring(const std::string& value);
  void set_errorstring(std::string&& value);
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  std::string* mutable_errorstring();
  std::string* release_errorstring();
  void set_allocated_errorstring(std::string* errorstring);
  private:
  const std::string& _internal_errorstring() const;
  void _internal_set_errorstring(const std::string& value);
  std::string* _internal_mutable_errorstring();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.ErrorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rulefilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rulefileid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorstring_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// -------------------------------------------------------------------

class Receipt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Receipt) */ {
 public:
  inline Receipt() : Receipt(nullptr) {}
  virtual ~Receipt();
  explicit constexpr Receipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Receipt(const Receipt& from);
  Receipt(Receipt&& from) noexcept
    : Receipt() {
    *this = ::std::move(from);
  }

  inline Receipt& operator=(const Receipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Receipt& operator=(Receipt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Receipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Receipt* internal_default_instance() {
    return reinterpret_cast<const Receipt*>(
               &_Receipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Receipt& a, Receipt& b) {
    a.Swap(&b);
  }
  inline void Swap(Receipt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Receipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Receipt* New() const final {
    return CreateMaybeMessage<Receipt>(nullptr);
  }

  Receipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Receipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Receipt& from);
  void MergeFrom(const Receipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Receipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Receipt";
  }
  protected:
  explicit Receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofResponse_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleFileHashFieldNumber = 4,
    kErrorInfoFieldNumber = 5,
    kContractidFieldNumber = 2,
    kBindingHashFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated bytes ruleFileHash = 4;
  int rulefilehash_size() const;
  private:
  int _internal_rulefilehash_size() const;
  public:
  void clear_rulefilehash();
  const std::string& rulefilehash(int index) const;
  std::string* mutable_rulefilehash(int index);
  void set_rulefilehash(int index, const std::string& value);
  void set_rulefilehash(int index, std::string&& value);
  void set_rulefilehash(int index, const char* value);
  void set_rulefilehash(int index, const void* value, size_t size);
  std::string* add_rulefilehash();
  void add_rulefilehash(const std::string& value);
  void add_rulefilehash(std::string&& value);
  void add_rulefilehash(const char* value);
  void add_rulefilehash(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rulefilehash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rulefilehash();
  private:
  const std::string& _internal_rulefilehash(int index) const;
  std::string* _internal_add_rulefilehash();
  public:

  // repeated .request_proto.ErrorInfo errorInfo = 5;
  int errorinfo_size() const;
  private:
  int _internal_errorinfo_size() const;
  public:
  void clear_errorinfo();
  ::request_proto::ErrorInfo* mutable_errorinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ErrorInfo >*
      mutable_errorinfo();
  private:
  const ::request_proto::ErrorInfo& _internal_errorinfo(int index) const;
  ::request_proto::ErrorInfo* _internal_add_errorinfo();
  public:
  const ::request_proto::ErrorInfo& errorinfo(int index) const;
  ::request_proto::ErrorInfo* add_errorinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ErrorInfo >&
      errorinfo() const;

  // string contractid = 2;
  void clear_contractid();
  const std::string& contractid() const;
  void set_contractid(const std::string& value);
  void set_contractid(std::string&& value);
  void set_contractid(const char* value);
  void set_contractid(const char* value, size_t size);
  std::string* mutable_contractid();
  std::string* release_contractid();
  void set_allocated_contractid(std::string* contractid);
  private:
  const std::string& _internal_contractid() const;
  void _internal_set_contractid(const std::string& value);
  std::string* _internal_mutable_contractid();
  public:

  // bytes bindingHash = 3;
  void clear_bindinghash();
  const std::string& bindinghash() const;
  void set_bindinghash(const std::string& value);
  void set_bindinghash(std::string&& value);
  void set_bindinghash(const char* value);
  void set_bindinghash(const void* value, size_t size);
  std::string* mutable_bindinghash();
  std::string* release_bindinghash();
  void set_allocated_bindinghash(std::string* bindinghash);
  private:
  const std::string& _internal_bindinghash() const;
  void _internal_set_bindinghash(const std::string& value);
  std::string* _internal_mutable_bindinghash();
  public:

  // bool Status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Receipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rulefilehash_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ErrorInfo > errorinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bindinghash_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// -------------------------------------------------------------------

class Proof PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.Proof) */ {
 public:
  inline Proof() : Proof(nullptr) {}
  virtual ~Proof();
  explicit constexpr Proof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proof(const Proof& from);
  Proof(Proof&& from) noexcept
    : Proof() {
    *this = ::std::move(from);
  }

  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proof& operator=(Proof&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proof& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
               &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Proof& a, Proof& b) {
    a.Swap(&b);
  }
  inline void Swap(Proof* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proof* New() const final {
    return CreateMaybeMessage<Proof>(nullptr);
  }

  Proof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proof& from);
  void MergeFrom(const Proof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.Proof";
  }
  protected:
  explicit Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofResponse_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiptsFieldNumber = 4,
    kRequestHashFieldNumber = 2,
    kStateHashFieldNumber = 3,
    kSignatureFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // repeated .request_proto.Receipt receipts = 4;
  int receipts_size() const;
  private:
  int _internal_receipts_size() const;
  public:
  void clear_receipts();
  ::request_proto::Receipt* mutable_receipts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Receipt >*
      mutable_receipts();
  private:
  const ::request_proto::Receipt& _internal_receipts(int index) const;
  ::request_proto::Receipt* _internal_add_receipts();
  public:
  const ::request_proto::Receipt& receipts(int index) const;
  ::request_proto::Receipt* add_receipts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Receipt >&
      receipts() const;

  // bytes RequestHash = 2;
  void clear_requesthash();
  const std::string& requesthash() const;
  void set_requesthash(const std::string& value);
  void set_requesthash(std::string&& value);
  void set_requesthash(const char* value);
  void set_requesthash(const void* value, size_t size);
  std::string* mutable_requesthash();
  std::string* release_requesthash();
  void set_allocated_requesthash(std::string* requesthash);
  private:
  const std::string& _internal_requesthash() const;
  void _internal_set_requesthash(const std::string& value);
  std::string* _internal_mutable_requesthash();
  public:

  // bytes StateHash = 3;
  void clear_statehash();
  const std::string& statehash() const;
  void set_statehash(const std::string& value);
  void set_statehash(std::string&& value);
  void set_statehash(const char* value);
  void set_statehash(const void* value, size_t size);
  std::string* mutable_statehash();
  std::string* release_statehash();
  void set_allocated_statehash(std::string* statehash);
  private:
  const std::string& _internal_statehash() const;
  void _internal_set_statehash(const std::string& value);
  std::string* _internal_mutable_statehash();
  public:

  // bytes Signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.Proof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Receipt > receipts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statehash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// -------------------------------------------------------------------

class ProofResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.ProofResponse) */ {
 public:
  inline ProofResponse() : ProofResponse(nullptr) {}
  virtual ~ProofResponse();
  explicit constexpr ProofResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProofResponse(const ProofResponse& from);
  ProofResponse(ProofResponse&& from) noexcept
    : ProofResponse() {
    *this = ::std::move(from);
  }

  inline ProofResponse& operator=(const ProofResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofResponse& operator=(ProofResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProofResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofResponse* internal_default_instance() {
    return reinterpret_cast<const ProofResponse*>(
               &_ProofResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProofResponse& a, ProofResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProofResponse* New() const final {
    return CreateMaybeMessage<ProofResponse>(nullptr);
  }

  ProofResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProofResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProofResponse& from);
  void MergeFrom(const ProofResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.ProofResponse";
  }
  protected:
  explicit ProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ProofResponse_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofsFieldNumber = 3,
    kTxHashFieldNumber = 1,
    kProofsHashFieldNumber = 2,
    kTeeSignatureFieldNumber = 4,
  };
  // repeated .request_proto.Proof Proofs = 3;
  int proofs_size() const;
  private:
  int _internal_proofs_size() const;
  public:
  void clear_proofs();
  ::request_proto::Proof* mutable_proofs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Proof >*
      mutable_proofs();
  private:
  const ::request_proto::Proof& _internal_proofs(int index) const;
  ::request_proto::Proof* _internal_add_proofs();
  public:
  const ::request_proto::Proof& proofs(int index) const;
  ::request_proto::Proof* add_proofs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Proof >&
      proofs() const;

  // bytes TxHash = 1;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const void* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // bytes ProofsHash = 2;
  void clear_proofshash();
  const std::string& proofshash() const;
  void set_proofshash(const std::string& value);
  void set_proofshash(std::string&& value);
  void set_proofshash(const char* value);
  void set_proofshash(const void* value, size_t size);
  std::string* mutable_proofshash();
  std::string* release_proofshash();
  void set_allocated_proofshash(std::string* proofshash);
  private:
  const std::string& _internal_proofshash() const;
  void _internal_set_proofshash(const std::string& value);
  std::string* _internal_mutable_proofshash();
  public:

  // bytes TeeSignature = 4;
  void clear_teesignature();
  const std::string& teesignature() const;
  void set_teesignature(const std::string& value);
  void set_teesignature(std::string&& value);
  void set_teesignature(const char* value);
  void set_teesignature(const void* value, size_t size);
  std::string* mutable_teesignature();
  std::string* release_teesignature();
  void set_allocated_teesignature(std::string* teesignature);
  private:
  const std::string& _internal_teesignature() const;
  void _internal_set_teesignature(const std::string& value);
  std::string* _internal_mutable_teesignature();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.ProofResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Proof > proofs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proofshash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teesignature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorInfo

// bool status = 1;
inline void ErrorInfo::clear_status() {
  status_ = false;
}
inline bool ErrorInfo::_internal_status() const {
  return status_;
}
inline bool ErrorInfo::status() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.status)
  return _internal_status();
}
inline void ErrorInfo::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ErrorInfo::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.status)
}

// string ruleFileName = 2;
inline void ErrorInfo::clear_rulefilename() {
  rulefilename_.ClearToEmpty();
}
inline const std::string& ErrorInfo::rulefilename() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.ruleFileName)
  return _internal_rulefilename();
}
inline void ErrorInfo::set_rulefilename(const std::string& value) {
  _internal_set_rulefilename(value);
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.ruleFileName)
}
inline std::string* ErrorInfo::mutable_rulefilename() {
  // @@protoc_insertion_point(field_mutable:request_proto.ErrorInfo.ruleFileName)
  return _internal_mutable_rulefilename();
}
inline const std::string& ErrorInfo::_internal_rulefilename() const {
  return rulefilename_.Get();
}
inline void ErrorInfo::_internal_set_rulefilename(const std::string& value) {
  
  rulefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorInfo::set_rulefilename(std::string&& value) {
  
  rulefilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ErrorInfo.ruleFileName)
}
inline void ErrorInfo::set_rulefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rulefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ErrorInfo.ruleFileName)
}
inline void ErrorInfo::set_rulefilename(const char* value,
    size_t size) {
  
  rulefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ErrorInfo.ruleFileName)
}
inline std::string* ErrorInfo::_internal_mutable_rulefilename() {
  
  return rulefilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorInfo::release_rulefilename() {
  // @@protoc_insertion_point(field_release:request_proto.ErrorInfo.ruleFileName)
  return rulefilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorInfo::set_allocated_rulefilename(std::string* rulefilename) {
  if (rulefilename != nullptr) {
    
  } else {
    
  }
  rulefilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rulefilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ErrorInfo.ruleFileName)
}

// string ruleFileID = 3;
inline void ErrorInfo::clear_rulefileid() {
  rulefileid_.ClearToEmpty();
}
inline const std::string& ErrorInfo::rulefileid() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.ruleFileID)
  return _internal_rulefileid();
}
inline void ErrorInfo::set_rulefileid(const std::string& value) {
  _internal_set_rulefileid(value);
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.ruleFileID)
}
inline std::string* ErrorInfo::mutable_rulefileid() {
  // @@protoc_insertion_point(field_mutable:request_proto.ErrorInfo.ruleFileID)
  return _internal_mutable_rulefileid();
}
inline const std::string& ErrorInfo::_internal_rulefileid() const {
  return rulefileid_.Get();
}
inline void ErrorInfo::_internal_set_rulefileid(const std::string& value) {
  
  rulefileid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorInfo::set_rulefileid(std::string&& value) {
  
  rulefileid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ErrorInfo.ruleFileID)
}
inline void ErrorInfo::set_rulefileid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rulefileid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ErrorInfo.ruleFileID)
}
inline void ErrorInfo::set_rulefileid(const char* value,
    size_t size) {
  
  rulefileid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ErrorInfo.ruleFileID)
}
inline std::string* ErrorInfo::_internal_mutable_rulefileid() {
  
  return rulefileid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorInfo::release_rulefileid() {
  // @@protoc_insertion_point(field_release:request_proto.ErrorInfo.ruleFileID)
  return rulefileid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorInfo::set_allocated_rulefileid(std::string* rulefileid) {
  if (rulefileid != nullptr) {
    
  } else {
    
  }
  rulefileid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rulefileid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ErrorInfo.ruleFileID)
}

// string errorString = 4;
inline void ErrorInfo::clear_errorstring() {
  errorstring_.ClearToEmpty();
}
inline const std::string& ErrorInfo::errorstring() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.errorString)
  return _internal_errorstring();
}
inline void ErrorInfo::set_errorstring(const std::string& value) {
  _internal_set_errorstring(value);
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.errorString)
}
inline std::string* ErrorInfo::mutable_errorstring() {
  // @@protoc_insertion_point(field_mutable:request_proto.ErrorInfo.errorString)
  return _internal_mutable_errorstring();
}
inline const std::string& ErrorInfo::_internal_errorstring() const {
  return errorstring_.Get();
}
inline void ErrorInfo::_internal_set_errorstring(const std::string& value) {
  
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorInfo::set_errorstring(std::string&& value) {
  
  errorstring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ErrorInfo.errorString)
}
inline void ErrorInfo::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ErrorInfo.errorString)
}
inline void ErrorInfo::set_errorstring(const char* value,
    size_t size) {
  
  errorstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ErrorInfo.errorString)
}
inline std::string* ErrorInfo::_internal_mutable_errorstring() {
  
  return errorstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorInfo::release_errorstring() {
  // @@protoc_insertion_point(field_release:request_proto.ErrorInfo.errorString)
  return errorstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorInfo::set_allocated_errorstring(std::string* errorstring) {
  if (errorstring != nullptr) {
    
  } else {
    
  }
  errorstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errorstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ErrorInfo.errorString)
}

// -------------------------------------------------------------------

// Receipt

// bool Status = 1;
inline void Receipt::clear_status() {
  status_ = false;
}
inline bool Receipt::_internal_status() const {
  return status_;
}
inline bool Receipt::status() const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.Status)
  return _internal_status();
}
inline void Receipt::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void Receipt::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:request_proto.Receipt.Status)
}

// string contractid = 2;
inline void Receipt::clear_contractid() {
  contractid_.ClearToEmpty();
}
inline const std::string& Receipt::contractid() const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.contractid)
  return _internal_contractid();
}
inline void Receipt::set_contractid(const std::string& value) {
  _internal_set_contractid(value);
  // @@protoc_insertion_point(field_set:request_proto.Receipt.contractid)
}
inline std::string* Receipt::mutable_contractid() {
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.contractid)
  return _internal_mutable_contractid();
}
inline const std::string& Receipt::_internal_contractid() const {
  return contractid_.Get();
}
inline void Receipt::_internal_set_contractid(const std::string& value) {
  
  contractid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Receipt::set_contractid(std::string&& value) {
  
  contractid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Receipt.contractid)
}
inline void Receipt::set_contractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Receipt.contractid)
}
inline void Receipt::set_contractid(const char* value,
    size_t size) {
  
  contractid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Receipt.contractid)
}
inline std::string* Receipt::_internal_mutable_contractid() {
  
  return contractid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Receipt::release_contractid() {
  // @@protoc_insertion_point(field_release:request_proto.Receipt.contractid)
  return contractid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Receipt::set_allocated_contractid(std::string* contractid) {
  if (contractid != nullptr) {
    
  } else {
    
  }
  contractid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Receipt.contractid)
}

// bytes bindingHash = 3;
inline void Receipt::clear_bindinghash() {
  bindinghash_.ClearToEmpty();
}
inline const std::string& Receipt::bindinghash() const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.bindingHash)
  return _internal_bindinghash();
}
inline void Receipt::set_bindinghash(const std::string& value) {
  _internal_set_bindinghash(value);
  // @@protoc_insertion_point(field_set:request_proto.Receipt.bindingHash)
}
inline std::string* Receipt::mutable_bindinghash() {
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.bindingHash)
  return _internal_mutable_bindinghash();
}
inline const std::string& Receipt::_internal_bindinghash() const {
  return bindinghash_.Get();
}
inline void Receipt::_internal_set_bindinghash(const std::string& value) {
  
  bindinghash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Receipt::set_bindinghash(std::string&& value) {
  
  bindinghash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Receipt.bindingHash)
}
inline void Receipt::set_bindinghash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bindinghash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Receipt.bindingHash)
}
inline void Receipt::set_bindinghash(const void* value,
    size_t size) {
  
  bindinghash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Receipt.bindingHash)
}
inline std::string* Receipt::_internal_mutable_bindinghash() {
  
  return bindinghash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Receipt::release_bindinghash() {
  // @@protoc_insertion_point(field_release:request_proto.Receipt.bindingHash)
  return bindinghash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Receipt::set_allocated_bindinghash(std::string* bindinghash) {
  if (bindinghash != nullptr) {
    
  } else {
    
  }
  bindinghash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bindinghash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Receipt.bindingHash)
}

// repeated bytes ruleFileHash = 4;
inline int Receipt::_internal_rulefilehash_size() const {
  return rulefilehash_.size();
}
inline int Receipt::rulefilehash_size() const {
  return _internal_rulefilehash_size();
}
inline void Receipt::clear_rulefilehash() {
  rulefilehash_.Clear();
}
inline std::string* Receipt::add_rulefilehash() {
  // @@protoc_insertion_point(field_add_mutable:request_proto.Receipt.ruleFileHash)
  return _internal_add_rulefilehash();
}
inline const std::string& Receipt::_internal_rulefilehash(int index) const {
  return rulefilehash_.Get(index);
}
inline const std::string& Receipt::rulefilehash(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.ruleFileHash)
  return _internal_rulefilehash(index);
}
inline std::string* Receipt::mutable_rulefilehash(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.ruleFileHash)
  return rulefilehash_.Mutable(index);
}
inline void Receipt::set_rulefilehash(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:request_proto.Receipt.ruleFileHash)
  rulefilehash_.Mutable(index)->assign(value);
}
inline void Receipt::set_rulefilehash(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:request_proto.Receipt.ruleFileHash)
  rulefilehash_.Mutable(index)->assign(std::move(value));
}
inline void Receipt::set_rulefilehash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rulefilehash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:request_proto.Receipt.ruleFileHash)
}
inline void Receipt::set_rulefilehash(int index, const void* value, size_t size) {
  rulefilehash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:request_proto.Receipt.ruleFileHash)
}
inline std::string* Receipt::_internal_add_rulefilehash() {
  return rulefilehash_.Add();
}
inline void Receipt::add_rulefilehash(const std::string& value) {
  rulefilehash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:request_proto.Receipt.ruleFileHash)
}
inline void Receipt::add_rulefilehash(std::string&& value) {
  rulefilehash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:request_proto.Receipt.ruleFileHash)
}
inline void Receipt::add_rulefilehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rulefilehash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:request_proto.Receipt.ruleFileHash)
}
inline void Receipt::add_rulefilehash(const void* value, size_t size) {
  rulefilehash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:request_proto.Receipt.ruleFileHash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Receipt::rulefilehash() const {
  // @@protoc_insertion_point(field_list:request_proto.Receipt.ruleFileHash)
  return rulefilehash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Receipt::mutable_rulefilehash() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Receipt.ruleFileHash)
  return &rulefilehash_;
}

// repeated .request_proto.ErrorInfo errorInfo = 5;
inline int Receipt::_internal_errorinfo_size() const {
  return errorinfo_.size();
}
inline int Receipt::errorinfo_size() const {
  return _internal_errorinfo_size();
}
inline void Receipt::clear_errorinfo() {
  errorinfo_.Clear();
}
inline ::request_proto::ErrorInfo* Receipt::mutable_errorinfo(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.errorInfo)
  return errorinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ErrorInfo >*
Receipt::mutable_errorinfo() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Receipt.errorInfo)
  return &errorinfo_;
}
inline const ::request_proto::ErrorInfo& Receipt::_internal_errorinfo(int index) const {
  return errorinfo_.Get(index);
}
inline const ::request_proto::ErrorInfo& Receipt::errorinfo(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.errorInfo)
  return _internal_errorinfo(index);
}
inline ::request_proto::ErrorInfo* Receipt::_internal_add_errorinfo() {
  return errorinfo_.Add();
}
inline ::request_proto::ErrorInfo* Receipt::add_errorinfo() {
  // @@protoc_insertion_point(field_add:request_proto.Receipt.errorInfo)
  return _internal_add_errorinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::ErrorInfo >&
Receipt::errorinfo() const {
  // @@protoc_insertion_point(field_list:request_proto.Receipt.errorInfo)
  return errorinfo_;
}

// -------------------------------------------------------------------

// Proof

// bool status = 1;
inline void Proof::clear_status() {
  status_ = false;
}
inline bool Proof::_internal_status() const {
  return status_;
}
inline bool Proof::status() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.status)
  return _internal_status();
}
inline void Proof::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void Proof::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:request_proto.Proof.status)
}

// bytes RequestHash = 2;
inline void Proof::clear_requesthash() {
  requesthash_.ClearToEmpty();
}
inline const std::string& Proof::requesthash() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.RequestHash)
  return _internal_requesthash();
}
inline void Proof::set_requesthash(const std::string& value) {
  _internal_set_requesthash(value);
  // @@protoc_insertion_point(field_set:request_proto.Proof.RequestHash)
}
inline std::string* Proof::mutable_requesthash() {
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.RequestHash)
  return _internal_mutable_requesthash();
}
inline const std::string& Proof::_internal_requesthash() const {
  return requesthash_.Get();
}
inline void Proof::_internal_set_requesthash(const std::string& value) {
  
  requesthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Proof::set_requesthash(std::string&& value) {
  
  requesthash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Proof.RequestHash)
}
inline void Proof::set_requesthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requesthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Proof.RequestHash)
}
inline void Proof::set_requesthash(const void* value,
    size_t size) {
  
  requesthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Proof.RequestHash)
}
inline std::string* Proof::_internal_mutable_requesthash() {
  
  return requesthash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Proof::release_requesthash() {
  // @@protoc_insertion_point(field_release:request_proto.Proof.RequestHash)
  return requesthash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proof::set_allocated_requesthash(std::string* requesthash) {
  if (requesthash != nullptr) {
    
  } else {
    
  }
  requesthash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requesthash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Proof.RequestHash)
}

// bytes StateHash = 3;
inline void Proof::clear_statehash() {
  statehash_.ClearToEmpty();
}
inline const std::string& Proof::statehash() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.StateHash)
  return _internal_statehash();
}
inline void Proof::set_statehash(const std::string& value) {
  _internal_set_statehash(value);
  // @@protoc_insertion_point(field_set:request_proto.Proof.StateHash)
}
inline std::string* Proof::mutable_statehash() {
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.StateHash)
  return _internal_mutable_statehash();
}
inline const std::string& Proof::_internal_statehash() const {
  return statehash_.Get();
}
inline void Proof::_internal_set_statehash(const std::string& value) {
  
  statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Proof::set_statehash(std::string&& value) {
  
  statehash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Proof.StateHash)
}
inline void Proof::set_statehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Proof.StateHash)
}
inline void Proof::set_statehash(const void* value,
    size_t size) {
  
  statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Proof.StateHash)
}
inline std::string* Proof::_internal_mutable_statehash() {
  
  return statehash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Proof::release_statehash() {
  // @@protoc_insertion_point(field_release:request_proto.Proof.StateHash)
  return statehash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proof::set_allocated_statehash(std::string* statehash) {
  if (statehash != nullptr) {
    
  } else {
    
  }
  statehash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statehash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Proof.StateHash)
}

// repeated .request_proto.Receipt receipts = 4;
inline int Proof::_internal_receipts_size() const {
  return receipts_.size();
}
inline int Proof::receipts_size() const {
  return _internal_receipts_size();
}
inline void Proof::clear_receipts() {
  receipts_.Clear();
}
inline ::request_proto::Receipt* Proof::mutable_receipts(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.receipts)
  return receipts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Receipt >*
Proof::mutable_receipts() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Proof.receipts)
  return &receipts_;
}
inline const ::request_proto::Receipt& Proof::_internal_receipts(int index) const {
  return receipts_.Get(index);
}
inline const ::request_proto::Receipt& Proof::receipts(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.receipts)
  return _internal_receipts(index);
}
inline ::request_proto::Receipt* Proof::_internal_add_receipts() {
  return receipts_.Add();
}
inline ::request_proto::Receipt* Proof::add_receipts() {
  // @@protoc_insertion_point(field_add:request_proto.Proof.receipts)
  return _internal_add_receipts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Receipt >&
Proof::receipts() const {
  // @@protoc_insertion_point(field_list:request_proto.Proof.receipts)
  return receipts_;
}

// bytes Signature = 5;
inline void Proof::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Proof::signature() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.Signature)
  return _internal_signature();
}
inline void Proof::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:request_proto.Proof.Signature)
}
inline std::string* Proof::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.Signature)
  return _internal_mutable_signature();
}
inline const std::string& Proof::_internal_signature() const {
  return signature_.Get();
}
inline void Proof::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Proof::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Proof.Signature)
}
inline void Proof::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.Proof.Signature)
}
inline void Proof::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.Proof.Signature)
}
inline std::string* Proof::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Proof::release_signature() {
  // @@protoc_insertion_point(field_release:request_proto.Proof.Signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proof::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.Proof.Signature)
}

// -------------------------------------------------------------------

// ProofResponse

// bytes TxHash = 1;
inline void ProofResponse::clear_txhash() {
  txhash_.ClearToEmpty();
}
inline const std::string& ProofResponse::txhash() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.TxHash)
  return _internal_txhash();
}
inline void ProofResponse::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofResponse.TxHash)
}
inline std::string* ProofResponse::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.TxHash)
  return _internal_mutable_txhash();
}
inline const std::string& ProofResponse::_internal_txhash() const {
  return txhash_.Get();
}
inline void ProofResponse::_internal_set_txhash(const std::string& value) {
  
  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProofResponse::set_txhash(std::string&& value) {
  
  txhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofResponse.TxHash)
}
inline void ProofResponse::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ProofResponse.TxHash)
}
inline void ProofResponse::set_txhash(const void* value,
    size_t size) {
  
  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofResponse.TxHash)
}
inline std::string* ProofResponse::_internal_mutable_txhash() {
  
  return txhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProofResponse::release_txhash() {
  // @@protoc_insertion_point(field_release:request_proto.ProofResponse.TxHash)
  return txhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofResponse::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofResponse.TxHash)
}

// bytes ProofsHash = 2;
inline void ProofResponse::clear_proofshash() {
  proofshash_.ClearToEmpty();
}
inline const std::string& ProofResponse::proofshash() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.ProofsHash)
  return _internal_proofshash();
}
inline void ProofResponse::set_proofshash(const std::string& value) {
  _internal_set_proofshash(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofResponse.ProofsHash)
}
inline std::string* ProofResponse::mutable_proofshash() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.ProofsHash)
  return _internal_mutable_proofshash();
}
inline const std::string& ProofResponse::_internal_proofshash() const {
  return proofshash_.Get();
}
inline void ProofResponse::_internal_set_proofshash(const std::string& value) {
  
  proofshash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProofResponse::set_proofshash(std::string&& value) {
  
  proofshash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofResponse.ProofsHash)
}
inline void ProofResponse::set_proofshash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proofshash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ProofResponse.ProofsHash)
}
inline void ProofResponse::set_proofshash(const void* value,
    size_t size) {
  
  proofshash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofResponse.ProofsHash)
}
inline std::string* ProofResponse::_internal_mutable_proofshash() {
  
  return proofshash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProofResponse::release_proofshash() {
  // @@protoc_insertion_point(field_release:request_proto.ProofResponse.ProofsHash)
  return proofshash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofResponse::set_allocated_proofshash(std::string* proofshash) {
  if (proofshash != nullptr) {
    
  } else {
    
  }
  proofshash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proofshash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofResponse.ProofsHash)
}

// repeated .request_proto.Proof Proofs = 3;
inline int ProofResponse::_internal_proofs_size() const {
  return proofs_.size();
}
inline int ProofResponse::proofs_size() const {
  return _internal_proofs_size();
}
inline void ProofResponse::clear_proofs() {
  proofs_.Clear();
}
inline ::request_proto::Proof* ProofResponse::mutable_proofs(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.Proofs)
  return proofs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Proof >*
ProofResponse::mutable_proofs() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.ProofResponse.Proofs)
  return &proofs_;
}
inline const ::request_proto::Proof& ProofResponse::_internal_proofs(int index) const {
  return proofs_.Get(index);
}
inline const ::request_proto::Proof& ProofResponse::proofs(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.Proofs)
  return _internal_proofs(index);
}
inline ::request_proto::Proof* ProofResponse::_internal_add_proofs() {
  return proofs_.Add();
}
inline ::request_proto::Proof* ProofResponse::add_proofs() {
  // @@protoc_insertion_point(field_add:request_proto.ProofResponse.Proofs)
  return _internal_add_proofs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_proto::Proof >&
ProofResponse::proofs() const {
  // @@protoc_insertion_point(field_list:request_proto.ProofResponse.Proofs)
  return proofs_;
}

// bytes TeeSignature = 4;
inline void ProofResponse::clear_teesignature() {
  teesignature_.ClearToEmpty();
}
inline const std::string& ProofResponse::teesignature() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.TeeSignature)
  return _internal_teesignature();
}
inline void ProofResponse::set_teesignature(const std::string& value) {
  _internal_set_teesignature(value);
  // @@protoc_insertion_point(field_set:request_proto.ProofResponse.TeeSignature)
}
inline std::string* ProofResponse::mutable_teesignature() {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.TeeSignature)
  return _internal_mutable_teesignature();
}
inline const std::string& ProofResponse::_internal_teesignature() const {
  return teesignature_.Get();
}
inline void ProofResponse::_internal_set_teesignature(const std::string& value) {
  
  teesignature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProofResponse::set_teesignature(std::string&& value) {
  
  teesignature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofResponse.TeeSignature)
}
inline void ProofResponse::set_teesignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teesignature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.ProofResponse.TeeSignature)
}
inline void ProofResponse::set_teesignature(const void* value,
    size_t size) {
  
  teesignature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofResponse.TeeSignature)
}
inline std::string* ProofResponse::_internal_mutable_teesignature() {
  
  return teesignature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProofResponse::release_teesignature() {
  // @@protoc_insertion_point(field_release:request_proto.ProofResponse.TeeSignature)
  return teesignature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofResponse::set_allocated_teesignature(std::string* teesignature) {
  if (teesignature != nullptr) {
    
  } else {
    
  }
  teesignature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teesignature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofResponse.TeeSignature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProofResponse_2eproto
