// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProofResponse.proto

#ifndef PROTOBUF_INCLUDED_ProofResponse_2eproto
#define PROTOBUF_INCLUDED_ProofResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProofResponse_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ProofResponse_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ProofResponse_2eproto();
namespace request_proto {
class ErrorInfo;
class ErrorInfoDefaultTypeInternal;
extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
class Proof;
class ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class ProofResponse;
class ProofResponseDefaultTypeInternal;
extern ProofResponseDefaultTypeInternal _ProofResponse_default_instance_;
class Receipt;
class ReceiptDefaultTypeInternal;
extern ReceiptDefaultTypeInternal _Receipt_default_instance_;
}  // namespace request_proto
namespace google {
namespace protobuf {
template<> ::request_proto::ErrorInfo* Arena::CreateMaybeMessage<::request_proto::ErrorInfo>(Arena*);
template<> ::request_proto::Proof* Arena::CreateMaybeMessage<::request_proto::Proof>(Arena*);
template<> ::request_proto::ProofResponse* Arena::CreateMaybeMessage<::request_proto::ProofResponse>(Arena*);
template<> ::request_proto::Receipt* Arena::CreateMaybeMessage<::request_proto::Receipt>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace request_proto {

// ===================================================================

class ErrorInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.ErrorInfo) */ {
 public:
  ErrorInfo();
  virtual ~ErrorInfo();

  ErrorInfo(const ErrorInfo& from);

  inline ErrorInfo& operator=(const ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorInfo(ErrorInfo&& from) noexcept
    : ErrorInfo() {
    *this = ::std::move(from);
  }

  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ErrorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorInfo* internal_default_instance() {
    return reinterpret_cast<const ErrorInfo*>(
               &_ErrorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ErrorInfo* other);
  friend void swap(ErrorInfo& a, ErrorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorInfo* New() const final {
    return CreateMaybeMessage<ErrorInfo>(nullptr);
  }

  ErrorInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorInfo& from);
  void MergeFrom(const ErrorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ruleFileName = 2;
  void clear_rulefilename();
  static const int kRuleFileNameFieldNumber = 2;
  const ::std::string& rulefilename() const;
  void set_rulefilename(const ::std::string& value);
  #if LANG_CXX11
  void set_rulefilename(::std::string&& value);
  #endif
  void set_rulefilename(const char* value);
  void set_rulefilename(const char* value, size_t size);
  ::std::string* mutable_rulefilename();
  ::std::string* release_rulefilename();
  void set_allocated_rulefilename(::std::string* rulefilename);

  // string ruleFileID = 3;
  void clear_rulefileid();
  static const int kRuleFileIDFieldNumber = 3;
  const ::std::string& rulefileid() const;
  void set_rulefileid(const ::std::string& value);
  #if LANG_CXX11
  void set_rulefileid(::std::string&& value);
  #endif
  void set_rulefileid(const char* value);
  void set_rulefileid(const char* value, size_t size);
  ::std::string* mutable_rulefileid();
  ::std::string* release_rulefileid();
  void set_allocated_rulefileid(::std::string* rulefileid);

  // string errorString = 4;
  void clear_errorstring();
  static const int kErrorStringFieldNumber = 4;
  const ::std::string& errorstring() const;
  void set_errorstring(const ::std::string& value);
  #if LANG_CXX11
  void set_errorstring(::std::string&& value);
  #endif
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  ::std::string* mutable_errorstring();
  ::std::string* release_errorstring();
  void set_allocated_errorstring(::std::string* errorstring);

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:request_proto.ErrorInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rulefilename_;
  ::google::protobuf::internal::ArenaStringPtr rulefileid_;
  ::google::protobuf::internal::ArenaStringPtr errorstring_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// -------------------------------------------------------------------

class Receipt :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.Receipt) */ {
 public:
  Receipt();
  virtual ~Receipt();

  Receipt(const Receipt& from);

  inline Receipt& operator=(const Receipt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Receipt(Receipt&& from) noexcept
    : Receipt() {
    *this = ::std::move(from);
  }

  inline Receipt& operator=(Receipt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Receipt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Receipt* internal_default_instance() {
    return reinterpret_cast<const Receipt*>(
               &_Receipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Receipt* other);
  friend void swap(Receipt& a, Receipt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Receipt* New() const final {
    return CreateMaybeMessage<Receipt>(nullptr);
  }

  Receipt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Receipt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Receipt& from);
  void MergeFrom(const Receipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Receipt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes ruleFileHash = 4;
  int rulefilehash_size() const;
  void clear_rulefilehash();
  static const int kRuleFileHashFieldNumber = 4;
  const ::std::string& rulefilehash(int index) const;
  ::std::string* mutable_rulefilehash(int index);
  void set_rulefilehash(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rulefilehash(int index, ::std::string&& value);
  #endif
  void set_rulefilehash(int index, const char* value);
  void set_rulefilehash(int index, const void* value, size_t size);
  ::std::string* add_rulefilehash();
  void add_rulefilehash(const ::std::string& value);
  #if LANG_CXX11
  void add_rulefilehash(::std::string&& value);
  #endif
  void add_rulefilehash(const char* value);
  void add_rulefilehash(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& rulefilehash() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_rulefilehash();

  // repeated .request_proto.ErrorInfo errorInfo = 5;
  int errorinfo_size() const;
  void clear_errorinfo();
  static const int kErrorInfoFieldNumber = 5;
  ::request_proto::ErrorInfo* mutable_errorinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::request_proto::ErrorInfo >*
      mutable_errorinfo();
  const ::request_proto::ErrorInfo& errorinfo(int index) const;
  ::request_proto::ErrorInfo* add_errorinfo();
  const ::google::protobuf::RepeatedPtrField< ::request_proto::ErrorInfo >&
      errorinfo() const;

  // string contractid = 2;
  void clear_contractid();
  static const int kContractidFieldNumber = 2;
  const ::std::string& contractid() const;
  void set_contractid(const ::std::string& value);
  #if LANG_CXX11
  void set_contractid(::std::string&& value);
  #endif
  void set_contractid(const char* value);
  void set_contractid(const char* value, size_t size);
  ::std::string* mutable_contractid();
  ::std::string* release_contractid();
  void set_allocated_contractid(::std::string* contractid);

  // bytes bindingHash = 3;
  void clear_bindinghash();
  static const int kBindingHashFieldNumber = 3;
  const ::std::string& bindinghash() const;
  void set_bindinghash(const ::std::string& value);
  #if LANG_CXX11
  void set_bindinghash(::std::string&& value);
  #endif
  void set_bindinghash(const char* value);
  void set_bindinghash(const void* value, size_t size);
  ::std::string* mutable_bindinghash();
  ::std::string* release_bindinghash();
  void set_allocated_bindinghash(::std::string* bindinghash);

  // bool Status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:request_proto.Receipt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> rulefilehash_;
  ::google::protobuf::RepeatedPtrField< ::request_proto::ErrorInfo > errorinfo_;
  ::google::protobuf::internal::ArenaStringPtr contractid_;
  ::google::protobuf::internal::ArenaStringPtr bindinghash_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// -------------------------------------------------------------------

class Proof :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.Proof) */ {
 public:
  Proof();
  virtual ~Proof();

  Proof(const Proof& from);

  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proof(Proof&& from) noexcept
    : Proof() {
    *this = ::std::move(from);
  }

  inline Proof& operator=(Proof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Proof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
               &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Proof* other);
  friend void swap(Proof& a, Proof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proof* New() const final {
    return CreateMaybeMessage<Proof>(nullptr);
  }

  Proof* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proof>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proof& from);
  void MergeFrom(const Proof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .request_proto.Receipt receipts = 4;
  int receipts_size() const;
  void clear_receipts();
  static const int kReceiptsFieldNumber = 4;
  ::request_proto::Receipt* mutable_receipts(int index);
  ::google::protobuf::RepeatedPtrField< ::request_proto::Receipt >*
      mutable_receipts();
  const ::request_proto::Receipt& receipts(int index) const;
  ::request_proto::Receipt* add_receipts();
  const ::google::protobuf::RepeatedPtrField< ::request_proto::Receipt >&
      receipts() const;

  // bytes RequestHash = 2;
  void clear_requesthash();
  static const int kRequestHashFieldNumber = 2;
  const ::std::string& requesthash() const;
  void set_requesthash(const ::std::string& value);
  #if LANG_CXX11
  void set_requesthash(::std::string&& value);
  #endif
  void set_requesthash(const char* value);
  void set_requesthash(const void* value, size_t size);
  ::std::string* mutable_requesthash();
  ::std::string* release_requesthash();
  void set_allocated_requesthash(::std::string* requesthash);

  // bytes StateHash = 3;
  void clear_statehash();
  static const int kStateHashFieldNumber = 3;
  const ::std::string& statehash() const;
  void set_statehash(const ::std::string& value);
  #if LANG_CXX11
  void set_statehash(::std::string&& value);
  #endif
  void set_statehash(const char* value);
  void set_statehash(const void* value, size_t size);
  ::std::string* mutable_statehash();
  ::std::string* release_statehash();
  void set_allocated_statehash(::std::string* statehash);

  // bytes Signature = 5;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:request_proto.Proof)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::request_proto::Receipt > receipts_;
  ::google::protobuf::internal::ArenaStringPtr requesthash_;
  ::google::protobuf::internal::ArenaStringPtr statehash_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// -------------------------------------------------------------------

class ProofResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.ProofResponse) */ {
 public:
  ProofResponse();
  virtual ~ProofResponse();

  ProofResponse(const ProofResponse& from);

  inline ProofResponse& operator=(const ProofResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProofResponse(ProofResponse&& from) noexcept
    : ProofResponse() {
    *this = ::std::move(from);
  }

  inline ProofResponse& operator=(ProofResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProofResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProofResponse* internal_default_instance() {
    return reinterpret_cast<const ProofResponse*>(
               &_ProofResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProofResponse* other);
  friend void swap(ProofResponse& a, ProofResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProofResponse* New() const final {
    return CreateMaybeMessage<ProofResponse>(nullptr);
  }

  ProofResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProofResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProofResponse& from);
  void MergeFrom(const ProofResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .request_proto.Proof Proofs = 3;
  int proofs_size() const;
  void clear_proofs();
  static const int kProofsFieldNumber = 3;
  ::request_proto::Proof* mutable_proofs(int index);
  ::google::protobuf::RepeatedPtrField< ::request_proto::Proof >*
      mutable_proofs();
  const ::request_proto::Proof& proofs(int index) const;
  ::request_proto::Proof* add_proofs();
  const ::google::protobuf::RepeatedPtrField< ::request_proto::Proof >&
      proofs() const;

  // bytes TxHash = 1;
  void clear_txhash();
  static const int kTxHashFieldNumber = 1;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  #if LANG_CXX11
  void set_txhash(::std::string&& value);
  #endif
  void set_txhash(const char* value);
  void set_txhash(const void* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // bytes ProofsHash = 2;
  void clear_proofshash();
  static const int kProofsHashFieldNumber = 2;
  const ::std::string& proofshash() const;
  void set_proofshash(const ::std::string& value);
  #if LANG_CXX11
  void set_proofshash(::std::string&& value);
  #endif
  void set_proofshash(const char* value);
  void set_proofshash(const void* value, size_t size);
  ::std::string* mutable_proofshash();
  ::std::string* release_proofshash();
  void set_allocated_proofshash(::std::string* proofshash);

  // bytes TeeSignature = 4;
  void clear_teesignature();
  static const int kTeeSignatureFieldNumber = 4;
  const ::std::string& teesignature() const;
  void set_teesignature(const ::std::string& value);
  #if LANG_CXX11
  void set_teesignature(::std::string&& value);
  #endif
  void set_teesignature(const char* value);
  void set_teesignature(const void* value, size_t size);
  ::std::string* mutable_teesignature();
  ::std::string* release_teesignature();
  void set_allocated_teesignature(::std::string* teesignature);

  // @@protoc_insertion_point(class_scope:request_proto.ProofResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::request_proto::Proof > proofs_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  ::google::protobuf::internal::ArenaStringPtr proofshash_;
  ::google::protobuf::internal::ArenaStringPtr teesignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProofResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorInfo

// bool status = 1;
inline void ErrorInfo::clear_status() {
  status_ = false;
}
inline bool ErrorInfo::status() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.status)
  return status_;
}
inline void ErrorInfo::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.status)
}

// string ruleFileName = 2;
inline void ErrorInfo::clear_rulefilename() {
  rulefilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorInfo::rulefilename() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.ruleFileName)
  return rulefilename_.GetNoArena();
}
inline void ErrorInfo::set_rulefilename(const ::std::string& value) {
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.ruleFileName)
}
#if LANG_CXX11
inline void ErrorInfo::set_rulefilename(::std::string&& value) {
  
  rulefilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ErrorInfo.ruleFileName)
}
#endif
inline void ErrorInfo::set_rulefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.ErrorInfo.ruleFileName)
}
inline void ErrorInfo::set_rulefilename(const char* value, size_t size) {
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.ErrorInfo.ruleFileName)
}
inline ::std::string* ErrorInfo::mutable_rulefilename() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.ErrorInfo.ruleFileName)
  return rulefilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorInfo::release_rulefilename() {
  // @@protoc_insertion_point(field_release:request_proto.ErrorInfo.ruleFileName)
  
  return rulefilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorInfo::set_allocated_rulefilename(::std::string* rulefilename) {
  if (rulefilename != nullptr) {
    
  } else {
    
  }
  rulefilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulefilename);
  // @@protoc_insertion_point(field_set_allocated:request_proto.ErrorInfo.ruleFileName)
}

// string ruleFileID = 3;
inline void ErrorInfo::clear_rulefileid() {
  rulefileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorInfo::rulefileid() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.ruleFileID)
  return rulefileid_.GetNoArena();
}
inline void ErrorInfo::set_rulefileid(const ::std::string& value) {
  
  rulefileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.ruleFileID)
}
#if LANG_CXX11
inline void ErrorInfo::set_rulefileid(::std::string&& value) {
  
  rulefileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ErrorInfo.ruleFileID)
}
#endif
inline void ErrorInfo::set_rulefileid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rulefileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.ErrorInfo.ruleFileID)
}
inline void ErrorInfo::set_rulefileid(const char* value, size_t size) {
  
  rulefileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.ErrorInfo.ruleFileID)
}
inline ::std::string* ErrorInfo::mutable_rulefileid() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.ErrorInfo.ruleFileID)
  return rulefileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorInfo::release_rulefileid() {
  // @@protoc_insertion_point(field_release:request_proto.ErrorInfo.ruleFileID)
  
  return rulefileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorInfo::set_allocated_rulefileid(::std::string* rulefileid) {
  if (rulefileid != nullptr) {
    
  } else {
    
  }
  rulefileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulefileid);
  // @@protoc_insertion_point(field_set_allocated:request_proto.ErrorInfo.ruleFileID)
}

// string errorString = 4;
inline void ErrorInfo::clear_errorstring() {
  errorstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorInfo::errorstring() const {
  // @@protoc_insertion_point(field_get:request_proto.ErrorInfo.errorString)
  return errorstring_.GetNoArena();
}
inline void ErrorInfo::set_errorstring(const ::std::string& value) {
  
  errorstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.ErrorInfo.errorString)
}
#if LANG_CXX11
inline void ErrorInfo::set_errorstring(::std::string&& value) {
  
  errorstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ErrorInfo.errorString)
}
#endif
inline void ErrorInfo::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.ErrorInfo.errorString)
}
inline void ErrorInfo::set_errorstring(const char* value, size_t size) {
  
  errorstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.ErrorInfo.errorString)
}
inline ::std::string* ErrorInfo::mutable_errorstring() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.ErrorInfo.errorString)
  return errorstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorInfo::release_errorstring() {
  // @@protoc_insertion_point(field_release:request_proto.ErrorInfo.errorString)
  
  return errorstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorInfo::set_allocated_errorstring(::std::string* errorstring) {
  if (errorstring != nullptr) {
    
  } else {
    
  }
  errorstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorstring);
  // @@protoc_insertion_point(field_set_allocated:request_proto.ErrorInfo.errorString)
}

// -------------------------------------------------------------------

// Receipt

// bool Status = 1;
inline void Receipt::clear_status() {
  status_ = false;
}
inline bool Receipt::status() const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.Status)
  return status_;
}
inline void Receipt::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:request_proto.Receipt.Status)
}

// string contractid = 2;
inline void Receipt::clear_contractid() {
  contractid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Receipt::contractid() const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.contractid)
  return contractid_.GetNoArena();
}
inline void Receipt::set_contractid(const ::std::string& value) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.Receipt.contractid)
}
#if LANG_CXX11
inline void Receipt::set_contractid(::std::string&& value) {
  
  contractid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Receipt.contractid)
}
#endif
inline void Receipt::set_contractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.Receipt.contractid)
}
inline void Receipt::set_contractid(const char* value, size_t size) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.Receipt.contractid)
}
inline ::std::string* Receipt::mutable_contractid() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.contractid)
  return contractid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Receipt::release_contractid() {
  // @@protoc_insertion_point(field_release:request_proto.Receipt.contractid)
  
  return contractid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Receipt::set_allocated_contractid(::std::string* contractid) {
  if (contractid != nullptr) {
    
  } else {
    
  }
  contractid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractid);
  // @@protoc_insertion_point(field_set_allocated:request_proto.Receipt.contractid)
}

// bytes bindingHash = 3;
inline void Receipt::clear_bindinghash() {
  bindinghash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Receipt::bindinghash() const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.bindingHash)
  return bindinghash_.GetNoArena();
}
inline void Receipt::set_bindinghash(const ::std::string& value) {
  
  bindinghash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.Receipt.bindingHash)
}
#if LANG_CXX11
inline void Receipt::set_bindinghash(::std::string&& value) {
  
  bindinghash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Receipt.bindingHash)
}
#endif
inline void Receipt::set_bindinghash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bindinghash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.Receipt.bindingHash)
}
inline void Receipt::set_bindinghash(const void* value, size_t size) {
  
  bindinghash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.Receipt.bindingHash)
}
inline ::std::string* Receipt::mutable_bindinghash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.bindingHash)
  return bindinghash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Receipt::release_bindinghash() {
  // @@protoc_insertion_point(field_release:request_proto.Receipt.bindingHash)
  
  return bindinghash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Receipt::set_allocated_bindinghash(::std::string* bindinghash) {
  if (bindinghash != nullptr) {
    
  } else {
    
  }
  bindinghash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindinghash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.Receipt.bindingHash)
}

// repeated bytes ruleFileHash = 4;
inline int Receipt::rulefilehash_size() const {
  return rulefilehash_.size();
}
inline void Receipt::clear_rulefilehash() {
  rulefilehash_.Clear();
}
inline const ::std::string& Receipt::rulefilehash(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.ruleFileHash)
  return rulefilehash_.Get(index);
}
inline ::std::string* Receipt::mutable_rulefilehash(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.ruleFileHash)
  return rulefilehash_.Mutable(index);
}
inline void Receipt::set_rulefilehash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:request_proto.Receipt.ruleFileHash)
  rulefilehash_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Receipt::set_rulefilehash(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:request_proto.Receipt.ruleFileHash)
  rulefilehash_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Receipt::set_rulefilehash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rulefilehash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:request_proto.Receipt.ruleFileHash)
}
inline void Receipt::set_rulefilehash(int index, const void* value, size_t size) {
  rulefilehash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:request_proto.Receipt.ruleFileHash)
}
inline ::std::string* Receipt::add_rulefilehash() {
  // @@protoc_insertion_point(field_add_mutable:request_proto.Receipt.ruleFileHash)
  return rulefilehash_.Add();
}
inline void Receipt::add_rulefilehash(const ::std::string& value) {
  rulefilehash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:request_proto.Receipt.ruleFileHash)
}
#if LANG_CXX11
inline void Receipt::add_rulefilehash(::std::string&& value) {
  rulefilehash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:request_proto.Receipt.ruleFileHash)
}
#endif
inline void Receipt::add_rulefilehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rulefilehash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:request_proto.Receipt.ruleFileHash)
}
inline void Receipt::add_rulefilehash(const void* value, size_t size) {
  rulefilehash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:request_proto.Receipt.ruleFileHash)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Receipt::rulefilehash() const {
  // @@protoc_insertion_point(field_list:request_proto.Receipt.ruleFileHash)
  return rulefilehash_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Receipt::mutable_rulefilehash() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Receipt.ruleFileHash)
  return &rulefilehash_;
}

// repeated .request_proto.ErrorInfo errorInfo = 5;
inline int Receipt::errorinfo_size() const {
  return errorinfo_.size();
}
inline void Receipt::clear_errorinfo() {
  errorinfo_.Clear();
}
inline ::request_proto::ErrorInfo* Receipt::mutable_errorinfo(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Receipt.errorInfo)
  return errorinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::request_proto::ErrorInfo >*
Receipt::mutable_errorinfo() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Receipt.errorInfo)
  return &errorinfo_;
}
inline const ::request_proto::ErrorInfo& Receipt::errorinfo(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Receipt.errorInfo)
  return errorinfo_.Get(index);
}
inline ::request_proto::ErrorInfo* Receipt::add_errorinfo() {
  // @@protoc_insertion_point(field_add:request_proto.Receipt.errorInfo)
  return errorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::request_proto::ErrorInfo >&
Receipt::errorinfo() const {
  // @@protoc_insertion_point(field_list:request_proto.Receipt.errorInfo)
  return errorinfo_;
}

// -------------------------------------------------------------------

// Proof

// bool status = 1;
inline void Proof::clear_status() {
  status_ = false;
}
inline bool Proof::status() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.status)
  return status_;
}
inline void Proof::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:request_proto.Proof.status)
}

// bytes RequestHash = 2;
inline void Proof::clear_requesthash() {
  requesthash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proof::requesthash() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.RequestHash)
  return requesthash_.GetNoArena();
}
inline void Proof::set_requesthash(const ::std::string& value) {
  
  requesthash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.Proof.RequestHash)
}
#if LANG_CXX11
inline void Proof::set_requesthash(::std::string&& value) {
  
  requesthash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Proof.RequestHash)
}
#endif
inline void Proof::set_requesthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requesthash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.Proof.RequestHash)
}
inline void Proof::set_requesthash(const void* value, size_t size) {
  
  requesthash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.Proof.RequestHash)
}
inline ::std::string* Proof::mutable_requesthash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.RequestHash)
  return requesthash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proof::release_requesthash() {
  // @@protoc_insertion_point(field_release:request_proto.Proof.RequestHash)
  
  return requesthash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proof::set_allocated_requesthash(::std::string* requesthash) {
  if (requesthash != nullptr) {
    
  } else {
    
  }
  requesthash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requesthash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.Proof.RequestHash)
}

// bytes StateHash = 3;
inline void Proof::clear_statehash() {
  statehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proof::statehash() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.StateHash)
  return statehash_.GetNoArena();
}
inline void Proof::set_statehash(const ::std::string& value) {
  
  statehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.Proof.StateHash)
}
#if LANG_CXX11
inline void Proof::set_statehash(::std::string&& value) {
  
  statehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Proof.StateHash)
}
#endif
inline void Proof::set_statehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.Proof.StateHash)
}
inline void Proof::set_statehash(const void* value, size_t size) {
  
  statehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.Proof.StateHash)
}
inline ::std::string* Proof::mutable_statehash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.StateHash)
  return statehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proof::release_statehash() {
  // @@protoc_insertion_point(field_release:request_proto.Proof.StateHash)
  
  return statehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proof::set_allocated_statehash(::std::string* statehash) {
  if (statehash != nullptr) {
    
  } else {
    
  }
  statehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statehash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.Proof.StateHash)
}

// repeated .request_proto.Receipt receipts = 4;
inline int Proof::receipts_size() const {
  return receipts_.size();
}
inline void Proof::clear_receipts() {
  receipts_.Clear();
}
inline ::request_proto::Receipt* Proof::mutable_receipts(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.receipts)
  return receipts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::request_proto::Receipt >*
Proof::mutable_receipts() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.Proof.receipts)
  return &receipts_;
}
inline const ::request_proto::Receipt& Proof::receipts(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.receipts)
  return receipts_.Get(index);
}
inline ::request_proto::Receipt* Proof::add_receipts() {
  // @@protoc_insertion_point(field_add:request_proto.Proof.receipts)
  return receipts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::request_proto::Receipt >&
Proof::receipts() const {
  // @@protoc_insertion_point(field_list:request_proto.Proof.receipts)
  return receipts_;
}

// bytes Signature = 5;
inline void Proof::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proof::signature() const {
  // @@protoc_insertion_point(field_get:request_proto.Proof.Signature)
  return signature_.GetNoArena();
}
inline void Proof::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.Proof.Signature)
}
#if LANG_CXX11
inline void Proof::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Proof.Signature)
}
#endif
inline void Proof::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.Proof.Signature)
}
inline void Proof::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.Proof.Signature)
}
inline ::std::string* Proof::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.Proof.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proof::release_signature() {
  // @@protoc_insertion_point(field_release:request_proto.Proof.Signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proof::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:request_proto.Proof.Signature)
}

// -------------------------------------------------------------------

// ProofResponse

// bytes TxHash = 1;
inline void ProofResponse::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProofResponse::txhash() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.TxHash)
  return txhash_.GetNoArena();
}
inline void ProofResponse::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.ProofResponse.TxHash)
}
#if LANG_CXX11
inline void ProofResponse::set_txhash(::std::string&& value) {
  
  txhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofResponse.TxHash)
}
#endif
inline void ProofResponse::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.ProofResponse.TxHash)
}
inline void ProofResponse::set_txhash(const void* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofResponse.TxHash)
}
inline ::std::string* ProofResponse::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.TxHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProofResponse::release_txhash() {
  // @@protoc_insertion_point(field_release:request_proto.ProofResponse.TxHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProofResponse::set_allocated_txhash(::std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofResponse.TxHash)
}

// bytes ProofsHash = 2;
inline void ProofResponse::clear_proofshash() {
  proofshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProofResponse::proofshash() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.ProofsHash)
  return proofshash_.GetNoArena();
}
inline void ProofResponse::set_proofshash(const ::std::string& value) {
  
  proofshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.ProofResponse.ProofsHash)
}
#if LANG_CXX11
inline void ProofResponse::set_proofshash(::std::string&& value) {
  
  proofshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofResponse.ProofsHash)
}
#endif
inline void ProofResponse::set_proofshash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proofshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.ProofResponse.ProofsHash)
}
inline void ProofResponse::set_proofshash(const void* value, size_t size) {
  
  proofshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofResponse.ProofsHash)
}
inline ::std::string* ProofResponse::mutable_proofshash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.ProofsHash)
  return proofshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProofResponse::release_proofshash() {
  // @@protoc_insertion_point(field_release:request_proto.ProofResponse.ProofsHash)
  
  return proofshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProofResponse::set_allocated_proofshash(::std::string* proofshash) {
  if (proofshash != nullptr) {
    
  } else {
    
  }
  proofshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proofshash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofResponse.ProofsHash)
}

// repeated .request_proto.Proof Proofs = 3;
inline int ProofResponse::proofs_size() const {
  return proofs_.size();
}
inline void ProofResponse::clear_proofs() {
  proofs_.Clear();
}
inline ::request_proto::Proof* ProofResponse::mutable_proofs(int index) {
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.Proofs)
  return proofs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::request_proto::Proof >*
ProofResponse::mutable_proofs() {
  // @@protoc_insertion_point(field_mutable_list:request_proto.ProofResponse.Proofs)
  return &proofs_;
}
inline const ::request_proto::Proof& ProofResponse::proofs(int index) const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.Proofs)
  return proofs_.Get(index);
}
inline ::request_proto::Proof* ProofResponse::add_proofs() {
  // @@protoc_insertion_point(field_add:request_proto.ProofResponse.Proofs)
  return proofs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::request_proto::Proof >&
ProofResponse::proofs() const {
  // @@protoc_insertion_point(field_list:request_proto.ProofResponse.Proofs)
  return proofs_;
}

// bytes TeeSignature = 4;
inline void ProofResponse::clear_teesignature() {
  teesignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProofResponse::teesignature() const {
  // @@protoc_insertion_point(field_get:request_proto.ProofResponse.TeeSignature)
  return teesignature_.GetNoArena();
}
inline void ProofResponse::set_teesignature(const ::std::string& value) {
  
  teesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.ProofResponse.TeeSignature)
}
#if LANG_CXX11
inline void ProofResponse::set_teesignature(::std::string&& value) {
  
  teesignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.ProofResponse.TeeSignature)
}
#endif
inline void ProofResponse::set_teesignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.ProofResponse.TeeSignature)
}
inline void ProofResponse::set_teesignature(const void* value, size_t size) {
  
  teesignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.ProofResponse.TeeSignature)
}
inline ::std::string* ProofResponse::mutable_teesignature() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.ProofResponse.TeeSignature)
  return teesignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProofResponse::release_teesignature() {
  // @@protoc_insertion_point(field_release:request_proto.ProofResponse.TeeSignature)
  
  return teesignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProofResponse::set_allocated_teesignature(::std::string* teesignature) {
  if (teesignature != nullptr) {
    
  } else {
    
  }
  teesignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teesignature);
  // @@protoc_insertion_point(field_set_allocated:request_proto.ProofResponse.TeeSignature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ProofResponse_2eproto
