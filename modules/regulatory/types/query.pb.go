// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regulatory/regulatory/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetRuleRequest struct {
	RuleName string `protobuf:"bytes,1,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
}

func (m *QueryGetRuleRequest) Reset()         { *m = QueryGetRuleRequest{} }
func (m *QueryGetRuleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRuleRequest) ProtoMessage()    {}
func (*QueryGetRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{2}
}
func (m *QueryGetRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRuleRequest.Merge(m, src)
}
func (m *QueryGetRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRuleRequest proto.InternalMessageInfo

func (m *QueryGetRuleRequest) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

type QueryGetRuleResponse struct {
	Rule Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule"`
}

func (m *QueryGetRuleResponse) Reset()         { *m = QueryGetRuleResponse{} }
func (m *QueryGetRuleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRuleResponse) ProtoMessage()    {}
func (*QueryGetRuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{3}
}
func (m *QueryGetRuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRuleResponse.Merge(m, src)
}
func (m *QueryGetRuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRuleResponse proto.InternalMessageInfo

func (m *QueryGetRuleResponse) GetRule() Rule {
	if m != nil {
		return m.Rule
	}
	return Rule{}
}

type QueryAllRuleRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRuleRequest) Reset()         { *m = QueryAllRuleRequest{} }
func (m *QueryAllRuleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRuleRequest) ProtoMessage()    {}
func (*QueryAllRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{4}
}
func (m *QueryAllRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRuleRequest.Merge(m, src)
}
func (m *QueryAllRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRuleRequest proto.InternalMessageInfo

func (m *QueryAllRuleRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRuleResponse struct {
	Rule       []Rule              `protobuf:"bytes,1,rep,name=rule,proto3" json:"rule"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRuleResponse) Reset()         { *m = QueryAllRuleResponse{} }
func (m *QueryAllRuleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRuleResponse) ProtoMessage()    {}
func (*QueryAllRuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{5}
}
func (m *QueryAllRuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRuleResponse.Merge(m, src)
}
func (m *QueryAllRuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRuleResponse proto.InternalMessageInfo

func (m *QueryAllRuleResponse) GetRule() []Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *QueryAllRuleResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBindingRequest struct {
	BindingName string `protobuf:"bytes,1,opt,name=bindingName,proto3" json:"bindingName,omitempty"`
}

func (m *QueryGetBindingRequest) Reset()         { *m = QueryGetBindingRequest{} }
func (m *QueryGetBindingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBindingRequest) ProtoMessage()    {}
func (*QueryGetBindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{6}
}
func (m *QueryGetBindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBindingRequest.Merge(m, src)
}
func (m *QueryGetBindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBindingRequest proto.InternalMessageInfo

func (m *QueryGetBindingRequest) GetBindingName() string {
	if m != nil {
		return m.BindingName
	}
	return ""
}

type QueryGetBindingResponse struct {
	Binding Binding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding"`
}

func (m *QueryGetBindingResponse) Reset()         { *m = QueryGetBindingResponse{} }
func (m *QueryGetBindingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBindingResponse) ProtoMessage()    {}
func (*QueryGetBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{7}
}
func (m *QueryGetBindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBindingResponse.Merge(m, src)
}
func (m *QueryGetBindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBindingResponse proto.InternalMessageInfo

func (m *QueryGetBindingResponse) GetBinding() Binding {
	if m != nil {
		return m.Binding
	}
	return Binding{}
}

type QueryAllBindingRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBindingRequest) Reset()         { *m = QueryAllBindingRequest{} }
func (m *QueryAllBindingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBindingRequest) ProtoMessage()    {}
func (*QueryAllBindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{8}
}
func (m *QueryAllBindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBindingRequest.Merge(m, src)
}
func (m *QueryAllBindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBindingRequest proto.InternalMessageInfo

func (m *QueryAllBindingRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBindingResponse struct {
	Binding    []Binding           `protobuf:"bytes,1,rep,name=binding,proto3" json:"binding"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBindingResponse) Reset()         { *m = QueryAllBindingResponse{} }
func (m *QueryAllBindingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBindingResponse) ProtoMessage()    {}
func (*QueryAllBindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{9}
}
func (m *QueryAllBindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBindingResponse.Merge(m, src)
}
func (m *QueryAllBindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBindingResponse proto.InternalMessageInfo

func (m *QueryAllBindingResponse) GetBinding() []Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (m *QueryAllBindingResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRelationRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *QueryGetRelationRequest) Reset()         { *m = QueryGetRelationRequest{} }
func (m *QueryGetRelationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelationRequest) ProtoMessage()    {}
func (*QueryGetRelationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{10}
}
func (m *QueryGetRelationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelationRequest.Merge(m, src)
}
func (m *QueryGetRelationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelationRequest proto.InternalMessageInfo

func (m *QueryGetRelationRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryGetRelationResponse struct {
	Relation Relation `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation"`
}

func (m *QueryGetRelationResponse) Reset()         { *m = QueryGetRelationResponse{} }
func (m *QueryGetRelationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelationResponse) ProtoMessage()    {}
func (*QueryGetRelationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{11}
}
func (m *QueryGetRelationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelationResponse.Merge(m, src)
}
func (m *QueryGetRelationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelationResponse proto.InternalMessageInfo

func (m *QueryGetRelationResponse) GetRelation() Relation {
	if m != nil {
		return m.Relation
	}
	return Relation{}
}

type QueryAllRelationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelationRequest) Reset()         { *m = QueryAllRelationRequest{} }
func (m *QueryAllRelationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelationRequest) ProtoMessage()    {}
func (*QueryAllRelationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{12}
}
func (m *QueryAllRelationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelationRequest.Merge(m, src)
}
func (m *QueryAllRelationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelationRequest proto.InternalMessageInfo

func (m *QueryAllRelationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRelationResponse struct {
	Relation   []Relation          `protobuf:"bytes,1,rep,name=relation,proto3" json:"relation"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelationResponse) Reset()         { *m = QueryAllRelationResponse{} }
func (m *QueryAllRelationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelationResponse) ProtoMessage()    {}
func (*QueryAllRelationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{13}
}
func (m *QueryAllRelationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelationResponse.Merge(m, src)
}
func (m *QueryAllRelationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelationResponse proto.InternalMessageInfo

func (m *QueryAllRelationResponse) GetRelation() []Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (m *QueryAllRelationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRegistrationRequest struct {
	RegulatoryServiceName string `protobuf:"bytes,1,opt,name=regulatoryServiceName,proto3" json:"regulatoryServiceName,omitempty"`
}

func (m *QueryGetRegistrationRequest) Reset()         { *m = QueryGetRegistrationRequest{} }
func (m *QueryGetRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistrationRequest) ProtoMessage()    {}
func (*QueryGetRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{14}
}
func (m *QueryGetRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistrationRequest.Merge(m, src)
}
func (m *QueryGetRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistrationRequest proto.InternalMessageInfo

func (m *QueryGetRegistrationRequest) GetRegulatoryServiceName() string {
	if m != nil {
		return m.RegulatoryServiceName
	}
	return ""
}

type QueryGetRegistrationResponse struct {
	Registration Registration `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration"`
}

func (m *QueryGetRegistrationResponse) Reset()         { *m = QueryGetRegistrationResponse{} }
func (m *QueryGetRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistrationResponse) ProtoMessage()    {}
func (*QueryGetRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{15}
}
func (m *QueryGetRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistrationResponse.Merge(m, src)
}
func (m *QueryGetRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistrationResponse proto.InternalMessageInfo

func (m *QueryGetRegistrationResponse) GetRegistration() Registration {
	if m != nil {
		return m.Registration
	}
	return Registration{}
}

type QueryAllRegistrationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistrationRequest) Reset()         { *m = QueryAllRegistrationRequest{} }
func (m *QueryAllRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistrationRequest) ProtoMessage()    {}
func (*QueryAllRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{16}
}
func (m *QueryAllRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistrationRequest.Merge(m, src)
}
func (m *QueryAllRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistrationRequest proto.InternalMessageInfo

func (m *QueryAllRegistrationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRegistrationResponse struct {
	Registration []Registration      `protobuf:"bytes,1,rep,name=registration,proto3" json:"registration"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRegistrationResponse) Reset()         { *m = QueryAllRegistrationResponse{} }
func (m *QueryAllRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRegistrationResponse) ProtoMessage()    {}
func (*QueryAllRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{17}
}
func (m *QueryAllRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRegistrationResponse.Merge(m, src)
}
func (m *QueryAllRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRegistrationResponse proto.InternalMessageInfo

func (m *QueryAllRegistrationResponse) GetRegistration() []Registration {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *QueryAllRegistrationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSuspiciousAccountListRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *QueryGetSuspiciousAccountListRequest) Reset()         { *m = QueryGetSuspiciousAccountListRequest{} }
func (m *QueryGetSuspiciousAccountListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuspiciousAccountListRequest) ProtoMessage()    {}
func (*QueryGetSuspiciousAccountListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{18}
}
func (m *QueryGetSuspiciousAccountListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuspiciousAccountListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuspiciousAccountListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuspiciousAccountListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuspiciousAccountListRequest.Merge(m, src)
}
func (m *QueryGetSuspiciousAccountListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuspiciousAccountListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuspiciousAccountListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuspiciousAccountListRequest proto.InternalMessageInfo

func (m *QueryGetSuspiciousAccountListRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryGetSuspiciousAccountListResponse struct {
	SuspiciousAccountList SuspiciousAccountList `protobuf:"bytes,1,opt,name=suspiciousAccountList,proto3" json:"suspiciousAccountList"`
}

func (m *QueryGetSuspiciousAccountListResponse) Reset()         { *m = QueryGetSuspiciousAccountListResponse{} }
func (m *QueryGetSuspiciousAccountListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuspiciousAccountListResponse) ProtoMessage()    {}
func (*QueryGetSuspiciousAccountListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{19}
}
func (m *QueryGetSuspiciousAccountListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuspiciousAccountListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuspiciousAccountListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuspiciousAccountListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuspiciousAccountListResponse.Merge(m, src)
}
func (m *QueryGetSuspiciousAccountListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuspiciousAccountListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuspiciousAccountListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuspiciousAccountListResponse proto.InternalMessageInfo

func (m *QueryGetSuspiciousAccountListResponse) GetSuspiciousAccountList() SuspiciousAccountList {
	if m != nil {
		return m.SuspiciousAccountList
	}
	return SuspiciousAccountList{}
}

type QueryAllSuspiciousAccountListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSuspiciousAccountListRequest) Reset()         { *m = QueryAllSuspiciousAccountListRequest{} }
func (m *QueryAllSuspiciousAccountListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSuspiciousAccountListRequest) ProtoMessage()    {}
func (*QueryAllSuspiciousAccountListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{20}
}
func (m *QueryAllSuspiciousAccountListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSuspiciousAccountListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSuspiciousAccountListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSuspiciousAccountListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSuspiciousAccountListRequest.Merge(m, src)
}
func (m *QueryAllSuspiciousAccountListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSuspiciousAccountListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSuspiciousAccountListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSuspiciousAccountListRequest proto.InternalMessageInfo

func (m *QueryAllSuspiciousAccountListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSuspiciousAccountListResponse struct {
	SuspiciousAccountList []SuspiciousAccountList `protobuf:"bytes,1,rep,name=suspiciousAccountList,proto3" json:"suspiciousAccountList"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSuspiciousAccountListResponse) Reset()         { *m = QueryAllSuspiciousAccountListResponse{} }
func (m *QueryAllSuspiciousAccountListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSuspiciousAccountListResponse) ProtoMessage()    {}
func (*QueryAllSuspiciousAccountListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{21}
}
func (m *QueryAllSuspiciousAccountListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSuspiciousAccountListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSuspiciousAccountListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSuspiciousAccountListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSuspiciousAccountListResponse.Merge(m, src)
}
func (m *QueryAllSuspiciousAccountListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSuspiciousAccountListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSuspiciousAccountListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSuspiciousAccountListResponse proto.InternalMessageInfo

func (m *QueryAllSuspiciousAccountListResponse) GetSuspiciousAccountList() []SuspiciousAccountList {
	if m != nil {
		return m.SuspiciousAccountList
	}
	return nil
}

func (m *QueryAllSuspiciousAccountListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSpecValuesRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *QueryGetSpecValuesRequest) Reset()         { *m = QueryGetSpecValuesRequest{} }
func (m *QueryGetSpecValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecValuesRequest) ProtoMessage()    {}
func (*QueryGetSpecValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{22}
}
func (m *QueryGetSpecValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecValuesRequest.Merge(m, src)
}
func (m *QueryGetSpecValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecValuesRequest proto.InternalMessageInfo

func (m *QueryGetSpecValuesRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryGetSpecValuesResponse struct {
	SpecValues SpecValues `protobuf:"bytes,1,opt,name=specValues,proto3" json:"specValues"`
}

func (m *QueryGetSpecValuesResponse) Reset()         { *m = QueryGetSpecValuesResponse{} }
func (m *QueryGetSpecValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecValuesResponse) ProtoMessage()    {}
func (*QueryGetSpecValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{23}
}
func (m *QueryGetSpecValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecValuesResponse.Merge(m, src)
}
func (m *QueryGetSpecValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecValuesResponse proto.InternalMessageInfo

func (m *QueryGetSpecValuesResponse) GetSpecValues() SpecValues {
	if m != nil {
		return m.SpecValues
	}
	return SpecValues{}
}

type QueryAllSpecValuesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecValuesRequest) Reset()         { *m = QueryAllSpecValuesRequest{} }
func (m *QueryAllSpecValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecValuesRequest) ProtoMessage()    {}
func (*QueryAllSpecValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{24}
}
func (m *QueryAllSpecValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecValuesRequest.Merge(m, src)
}
func (m *QueryAllSpecValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecValuesRequest proto.InternalMessageInfo

func (m *QueryAllSpecValuesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSpecValuesResponse struct {
	SpecValues []SpecValues        `protobuf:"bytes,1,rep,name=specValues,proto3" json:"specValues"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecValuesResponse) Reset()         { *m = QueryAllSpecValuesResponse{} }
func (m *QueryAllSpecValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecValuesResponse) ProtoMessage()    {}
func (*QueryAllSpecValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{25}
}
func (m *QueryAllSpecValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecValuesResponse.Merge(m, src)
}
func (m *QueryAllSpecValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecValuesResponse proto.InternalMessageInfo

func (m *QueryAllSpecValuesResponse) GetSpecValues() []SpecValues {
	if m != nil {
		return m.SpecValues
	}
	return nil
}

func (m *QueryAllSpecValuesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRewardListRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *QueryGetRewardListRequest) Reset()         { *m = QueryGetRewardListRequest{} }
func (m *QueryGetRewardListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardListRequest) ProtoMessage()    {}
func (*QueryGetRewardListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{26}
}
func (m *QueryGetRewardListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardListRequest.Merge(m, src)
}
func (m *QueryGetRewardListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardListRequest proto.InternalMessageInfo

func (m *QueryGetRewardListRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryGetRewardListResponse struct {
	RewardList RewardList `protobuf:"bytes,1,opt,name=rewardList,proto3" json:"rewardList"`
}

func (m *QueryGetRewardListResponse) Reset()         { *m = QueryGetRewardListResponse{} }
func (m *QueryGetRewardListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardListResponse) ProtoMessage()    {}
func (*QueryGetRewardListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{27}
}
func (m *QueryGetRewardListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardListResponse.Merge(m, src)
}
func (m *QueryGetRewardListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardListResponse proto.InternalMessageInfo

func (m *QueryGetRewardListResponse) GetRewardList() RewardList {
	if m != nil {
		return m.RewardList
	}
	return RewardList{}
}

type QueryAllRewardListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRewardListRequest) Reset()         { *m = QueryAllRewardListRequest{} }
func (m *QueryAllRewardListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRewardListRequest) ProtoMessage()    {}
func (*QueryAllRewardListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{28}
}
func (m *QueryAllRewardListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRewardListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRewardListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRewardListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRewardListRequest.Merge(m, src)
}
func (m *QueryAllRewardListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRewardListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRewardListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRewardListRequest proto.InternalMessageInfo

func (m *QueryAllRewardListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRewardListResponse struct {
	RewardList []RewardList        `protobuf:"bytes,1,rep,name=rewardList,proto3" json:"rewardList"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRewardListResponse) Reset()         { *m = QueryAllRewardListResponse{} }
func (m *QueryAllRewardListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRewardListResponse) ProtoMessage()    {}
func (*QueryAllRewardListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0606e35b671eb36, []int{29}
}
func (m *QueryAllRewardListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRewardListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRewardListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRewardListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRewardListResponse.Merge(m, src)
}
func (m *QueryAllRewardListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRewardListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRewardListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRewardListResponse proto.InternalMessageInfo

func (m *QueryAllRewardListResponse) GetRewardList() []RewardList {
	if m != nil {
		return m.RewardList
	}
	return nil
}

func (m *QueryAllRewardListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "regulatory.regulatory.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "regulatory.regulatory.QueryParamsResponse")
	proto.RegisterType((*QueryGetRuleRequest)(nil), "regulatory.regulatory.QueryGetRuleRequest")
	proto.RegisterType((*QueryGetRuleResponse)(nil), "regulatory.regulatory.QueryGetRuleResponse")
	proto.RegisterType((*QueryAllRuleRequest)(nil), "regulatory.regulatory.QueryAllRuleRequest")
	proto.RegisterType((*QueryAllRuleResponse)(nil), "regulatory.regulatory.QueryAllRuleResponse")
	proto.RegisterType((*QueryGetBindingRequest)(nil), "regulatory.regulatory.QueryGetBindingRequest")
	proto.RegisterType((*QueryGetBindingResponse)(nil), "regulatory.regulatory.QueryGetBindingResponse")
	proto.RegisterType((*QueryAllBindingRequest)(nil), "regulatory.regulatory.QueryAllBindingRequest")
	proto.RegisterType((*QueryAllBindingResponse)(nil), "regulatory.regulatory.QueryAllBindingResponse")
	proto.RegisterType((*QueryGetRelationRequest)(nil), "regulatory.regulatory.QueryGetRelationRequest")
	proto.RegisterType((*QueryGetRelationResponse)(nil), "regulatory.regulatory.QueryGetRelationResponse")
	proto.RegisterType((*QueryAllRelationRequest)(nil), "regulatory.regulatory.QueryAllRelationRequest")
	proto.RegisterType((*QueryAllRelationResponse)(nil), "regulatory.regulatory.QueryAllRelationResponse")
	proto.RegisterType((*QueryGetRegistrationRequest)(nil), "regulatory.regulatory.QueryGetRegistrationRequest")
	proto.RegisterType((*QueryGetRegistrationResponse)(nil), "regulatory.regulatory.QueryGetRegistrationResponse")
	proto.RegisterType((*QueryAllRegistrationRequest)(nil), "regulatory.regulatory.QueryAllRegistrationRequest")
	proto.RegisterType((*QueryAllRegistrationResponse)(nil), "regulatory.regulatory.QueryAllRegistrationResponse")
	proto.RegisterType((*QueryGetSuspiciousAccountListRequest)(nil), "regulatory.regulatory.QueryGetSuspiciousAccountListRequest")
	proto.RegisterType((*QueryGetSuspiciousAccountListResponse)(nil), "regulatory.regulatory.QueryGetSuspiciousAccountListResponse")
	proto.RegisterType((*QueryAllSuspiciousAccountListRequest)(nil), "regulatory.regulatory.QueryAllSuspiciousAccountListRequest")
	proto.RegisterType((*QueryAllSuspiciousAccountListResponse)(nil), "regulatory.regulatory.QueryAllSuspiciousAccountListResponse")
	proto.RegisterType((*QueryGetSpecValuesRequest)(nil), "regulatory.regulatory.QueryGetSpecValuesRequest")
	proto.RegisterType((*QueryGetSpecValuesResponse)(nil), "regulatory.regulatory.QueryGetSpecValuesResponse")
	proto.RegisterType((*QueryAllSpecValuesRequest)(nil), "regulatory.regulatory.QueryAllSpecValuesRequest")
	proto.RegisterType((*QueryAllSpecValuesResponse)(nil), "regulatory.regulatory.QueryAllSpecValuesResponse")
	proto.RegisterType((*QueryGetRewardListRequest)(nil), "regulatory.regulatory.QueryGetRewardListRequest")
	proto.RegisterType((*QueryGetRewardListResponse)(nil), "regulatory.regulatory.QueryGetRewardListResponse")
	proto.RegisterType((*QueryAllRewardListRequest)(nil), "regulatory.regulatory.QueryAllRewardListRequest")
	proto.RegisterType((*QueryAllRewardListResponse)(nil), "regulatory.regulatory.QueryAllRewardListResponse")
}

func init() { proto.RegisterFile("regulatory/regulatory/query.proto", fileDescriptor_c0606e35b671eb36) }

var fileDescriptor_c0606e35b671eb36 = []byte{
	// 1283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x33, 0xdd, 0x90, 0x84, 0x97, 0xa2, 0x4a, 0xd3, 0x04, 0xc2, 0xa6, 0xd9, 0x24, 0x93,
	0x9f, 0xa4, 0xad, 0x9d, 0x5f, 0x14, 0x41, 0x0a, 0x62, 0x53, 0x41, 0x38, 0x50, 0x14, 0x36, 0x12,
	0x12, 0x48, 0x55, 0x70, 0x36, 0xa3, 0xc5, 0x92, 0x63, 0x6f, 0x6d, 0x6f, 0x20, 0x8a, 0x72, 0xe1,
	0x00, 0x47, 0x40, 0x95, 0xe0, 0x86, 0x10, 0x87, 0x72, 0x83, 0x1b, 0x27, 0xfe, 0x80, 0x5e, 0x90,
	0x2a, 0x71, 0x41, 0x08, 0x21, 0x94, 0x70, 0xe0, 0xcf, 0x40, 0x9e, 0x7d, 0x5e, 0xcf, 0xae, 0x7f,
	0xcc, 0x7a, 0xd9, 0xde, 0x36, 0xce, 0x7b, 0x6f, 0x3e, 0xdf, 0xef, 0x1b, 0xdb, 0x6f, 0x0c, 0xb3,
	0x2e, 0xaf, 0x35, 0x2c, 0xc3, 0x77, 0xdc, 0x13, 0x5d, 0xfa, 0x79, 0xbf, 0xc1, 0xdd, 0x13, 0xad,
	0xee, 0x3a, 0xbe, 0x43, 0xc7, 0xa3, 0xeb, 0x5a, 0xf4, 0xb3, 0x38, 0x56, 0x73, 0x6a, 0x8e, 0x88,
	0xd0, 0x83, 0x5f, 0xcd, 0xe0, 0xe2, 0xb5, 0x9a, 0xe3, 0xd4, 0x2c, 0xae, 0x1b, 0x75, 0x53, 0x37,
	0x6c, 0xdb, 0xf1, 0x0d, 0xdf, 0x74, 0x6c, 0x0f, 0xff, 0xbb, 0x52, 0x75, 0xbc, 0x23, 0xc7, 0xd3,
	0x0f, 0x0c, 0x8f, 0x37, 0xd7, 0xd0, 0x8f, 0xd7, 0x0e, 0xb8, 0x6f, 0xac, 0xe9, 0x75, 0xa3, 0x66,
	0xda, 0x22, 0x18, 0x63, 0x59, 0x32, 0x59, 0xdd, 0x70, 0x8d, 0xa3, 0xb0, 0xde, 0x4c, 0x72, 0x8c,
	0xdb, 0xb0, 0x38, 0x46, 0xcc, 0x25, 0x47, 0x1c, 0x98, 0xf6, 0xa1, 0x69, 0xd7, 0x30, 0x68, 0x3e,
	0xa5, 0x0c, 0xb7, 0x64, 0xa0, 0xe5, 0xb4, 0xa8, 0x9a, 0xe9, 0xf9, 0xae, 0x1c, 0xb9, 0x91, 0x1c,
	0xe9, 0x35, 0xbc, 0xba, 0x59, 0x35, 0x9d, 0x86, 0xb7, 0x6f, 0x54, 0xab, 0x4e, 0xc3, 0xf6, 0xf7,
	0x2d, 0xd3, 0xf3, 0x31, 0x69, 0x29, 0x25, 0xa9, 0xce, 0xab, 0xfb, 0xc7, 0x86, 0xd5, 0xe0, 0x5e,
	0x76, 0xa0, 0xcb, 0x3f, 0x36, 0xdc, 0x43, 0xb9, 0xe2, 0xa2, 0xaa, 0x62, 0xb6, 0x7c, 0x6e, 0x1f,
	0xd6, 0x1d, 0xd3, 0xc6, 0x6a, 0x6c, 0x0c, 0xe8, 0xbb, 0x41, 0xc7, 0x76, 0x45, 0x03, 0x2a, 0xfc,
	0x7e, 0x83, 0x7b, 0x3e, 0xab, 0xc0, 0xd5, 0xb6, 0xab, 0x5e, 0xdd, 0xb1, 0x3d, 0x4e, 0xb7, 0x60,
	0xa8, 0xd9, 0xa8, 0x09, 0x32, 0x43, 0x96, 0x47, 0xd7, 0xa7, 0xb4, 0xc4, 0x4d, 0xa4, 0x35, 0xd3,
	0xb6, 0x07, 0x1f, 0xfd, 0x35, 0x3d, 0x50, 0xc1, 0x14, 0xb6, 0x86, 0x35, 0x77, 0xb8, 0x5f, 0x69,
	0x58, 0x1c, 0x97, 0xa2, 0x45, 0x18, 0x09, 0x1a, 0xfb, 0x8e, 0x71, 0xc4, 0x45, 0xd5, 0xa7, 0x2b,
	0xad, 0xbf, 0xd9, 0x5d, 0x18, 0x6b, 0x4f, 0x41, 0x8e, 0x17, 0x61, 0x30, 0x88, 0x41, 0x8a, 0xc9,
	0x14, 0x8a, 0x20, 0x05, 0x19, 0x44, 0x38, 0xbb, 0x87, 0x04, 0x65, 0xcb, 0x92, 0x09, 0xde, 0x04,
	0x88, 0xb6, 0x29, 0xd6, 0x5c, 0xd4, 0x9a, 0x7b, 0x5a, 0x0b, 0xf6, 0xb4, 0xd6, 0xbc, 0x6f, 0x70,
	0x4f, 0x6b, 0xbb, 0x46, 0x2d, 0xcc, 0xad, 0x48, 0x99, 0xec, 0x6b, 0x82, 0xb8, 0xad, 0xfa, 0x31,
	0xdc, 0x42, 0x0e, 0x5c, 0xba, 0xd3, 0xc6, 0x75, 0x49, 0x70, 0x2d, 0x29, 0xb9, 0x9a, 0x6b, 0xb6,
	0x81, 0xbd, 0x02, 0xcf, 0x86, 0x36, 0x6e, 0x37, 0xef, 0x90, 0x50, 0xfa, 0x0c, 0x8c, 0xe2, 0x3d,
	0x23, 0xf9, 0x2f, 0x5f, 0x62, 0xef, 0xc3, 0x73, 0xb1, 0x5c, 0x94, 0xf5, 0x1a, 0x0c, 0x63, 0x24,
	0x9a, 0x56, 0x4a, 0x51, 0x86, 0x89, 0x28, 0x2e, 0x4c, 0x62, 0x1f, 0x22, 0x56, 0xd9, 0xb2, 0x3a,
	0xb0, 0xfa, 0xd5, 0x91, 0xef, 0x09, 0xd2, 0xcb, 0x4b, 0x24, 0xd1, 0x17, 0x72, 0xd3, 0xf7, 0xaf,
	0x3b, 0x77, 0x22, 0x87, 0x2b, 0xf8, 0x68, 0x0a, 0x7d, 0x58, 0x86, 0x2b, 0x55, 0xc7, 0xf6, 0x5d,
	0xa3, 0xea, 0x97, 0x0f, 0x0f, 0x5d, 0xee, 0x79, 0xd8, 0xa2, 0xce, 0xcb, 0xec, 0x1e, 0x4c, 0xc4,
	0x8b, 0xa0, 0xd2, 0x32, 0x8c, 0x84, 0xcf, 0x3c, 0xf4, 0x72, 0x3a, 0x6d, 0x0b, 0x62, 0x18, 0x6a,
	0x6d, 0xa5, 0x31, 0x23, 0xf2, 0xb1, 0x93, 0xb1, 0x5f, 0xbd, 0x7a, 0x48, 0x50, 0x42, 0xdb, 0x1a,
	0x89, 0x12, 0x0a, 0x3d, 0x48, 0xe8, 0x5f, 0xbf, 0xf6, 0x60, 0x32, 0xb2, 0x3a, 0x7a, 0x49, 0x84,
	0x7e, 0x6c, 0x82, 0xf4, 0x66, 0xdd, 0xe3, 0xee, 0xb1, 0x59, 0x95, 0x1f, 0x6e, 0xc9, 0xff, 0x64,
	0x47, 0x70, 0x2d, 0xb9, 0x28, 0x1a, 0x70, 0x17, 0x2e, 0xcb, 0x6f, 0x24, 0xf4, 0x79, 0x2e, 0xd5,
	0x84, 0x28, 0x14, 0x8d, 0x68, 0x4b, 0x67, 0x1c, 0x35, 0x08, 0xaf, 0xe3, 0x1a, 0xfa, 0xd5, 0xd3,
	0x9f, 0x09, 0xca, 0x8a, 0xad, 0x93, 0x2a, 0xab, 0xf0, 0x3f, 0x64, 0xf5, 0xaf, 0xc7, 0xbb, 0x30,
	0x1f, 0xb6, 0x63, 0xaf, 0xf5, 0x7a, 0x2f, 0x37, 0xdf, 0xee, 0x6f, 0x9b, 0x9e, 0x9f, 0xff, 0x06,
	0xfd, 0x8a, 0xc0, 0x82, 0xa2, 0x24, 0x7a, 0xf2, 0x11, 0x8c, 0x7b, 0x49, 0x01, 0xd8, 0x87, 0x1b,
	0x29, 0xe6, 0x24, 0x16, 0x45, 0x97, 0x92, 0x0b, 0x32, 0x1b, 0x55, 0x96, 0x2d, 0x2b, 0x53, 0x65,
	0xbf, 0xb6, 0xc3, 0x1f, 0xa1, 0x07, 0xe9, 0x0b, 0xaa, 0x3d, 0x28, 0xf4, 0xd5, 0x83, 0xfe, 0x6d,
	0x99, 0x37, 0xe0, 0xf9, 0x56, 0x7f, 0xeb, 0xbc, 0xfa, 0x9e, 0x98, 0xed, 0xf2, 0xef, 0x13, 0x0e,
	0xc5, 0xa4, 0x32, 0xe8, 0xcb, 0x0e, 0x80, 0xd7, 0xba, 0x8a, 0x9d, 0x98, 0x4d, 0x33, 0xa3, 0x15,
	0x88, 0x0e, 0x48, 0xa9, 0xac, 0x8a, 0xb4, 0x41, 0x27, 0x62, 0xb4, 0xfd, 0xea, 0xf7, 0x8f, 0x04,
	0xc5, 0x74, 0xac, 0x92, 0x22, 0xa6, 0xd0, 0xa3, 0x98, 0x27, 0xd2, 0xc3, 0x8a, 0x98, 0xbb, 0x7b,
	0xbb, 0xd7, 0xa5, 0x1e, 0xca, 0x65, 0x22, 0xd9, 0x6e, 0xeb, 0xaa, 0xa2, 0x87, 0x51, 0x7a, 0x28,
	0x3b, 0x4a, 0x95, 0x7b, 0x18, 0xa7, 0x7d, 0x12, 0x3d, 0xec, 0x42, 0x4c, 0xa1, 0x47, 0x31, 0x7d,
	0xeb, 0xe1, 0xfa, 0xbf, 0x57, 0xe1, 0x29, 0x01, 0x4c, 0x3f, 0x23, 0x30, 0xd4, 0x3c, 0x89, 0xd0,
	0x17, 0x52, 0x90, 0xe2, 0x47, 0x9f, 0xe2, 0x4a, 0x37, 0xa1, 0xcd, 0x75, 0xd9, 0xc2, 0xa7, 0xbf,
	0xfd, 0xf3, 0xe0, 0xd2, 0x34, 0x9d, 0xd2, 0xb3, 0x4e, 0xb5, 0xf4, 0x0b, 0x02, 0x83, 0xc1, 0x74,
	0x4f, 0x33, 0x6b, 0xb7, 0x9f, 0x8b, 0x8a, 0xd7, 0xbb, 0x8a, 0x45, 0x10, 0x4d, 0x80, 0x2c, 0xd3,
	0x45, 0x3d, 0xfd, 0xe8, 0xac, 0x9f, 0x86, 0xe7, 0xaa, 0x33, 0xfa, 0x39, 0x81, 0xe1, 0xa0, 0x40,
	0xd9, 0xb2, 0xb2, 0xa1, 0xda, 0x8f, 0x4a, 0xd9, 0x50, 0x1d, 0xc7, 0x1e, 0x36, 0x27, 0xa0, 0xa6,
	0xe8, 0x64, 0x06, 0x14, 0xfd, 0x96, 0xc0, 0x30, 0x4e, 0xd8, 0xf4, 0xa6, 0x42, 0x72, 0xfb, 0x29,
	0xa1, 0xa8, 0x75, 0x1b, 0x8e, 0x3c, 0x9b, 0x82, 0x47, 0xa3, 0x37, 0xf4, 0xcc, 0xaf, 0x07, 0xfa,
	0xa9, 0x74, 0xfe, 0x39, 0xa3, 0x0f, 0x08, 0x00, 0x56, 0x0a, 0xdc, 0xba, 0xa9, 0x70, 0x20, 0x0f,
	0x63, 0xfc, 0x54, 0xc2, 0x16, 0x05, 0xe3, 0x0c, 0x2d, 0x65, 0x33, 0xd2, 0x87, 0x04, 0x46, 0xc2,
	0x51, 0x97, 0xaa, 0x8c, 0xe8, 0x18, 0xd9, 0x8b, 0x7a, 0xd7, 0xf1, 0x48, 0xf5, 0xb2, 0xa0, 0xda,
	0xa0, 0x6b, 0x7a, 0xf6, 0x27, 0x15, 0xfd, 0xb4, 0xe3, 0x51, 0x78, 0x46, 0xbf, 0x21, 0x30, 0x1a,
	0xd6, 0x0b, 0xfc, 0x53, 0x19, 0x92, 0x8b, 0x35, 0xe1, 0xa8, 0xc0, 0x96, 0x04, 0xeb, 0x2c, 0x9d,
	0x56, 0xb0, 0xd2, 0x5f, 0x08, 0x5c, 0x96, 0x27, 0x4a, 0xba, 0xae, 0xb4, 0x25, 0x36, 0x29, 0x17,
	0x37, 0x72, 0xe5, 0x20, 0xe2, 0x1d, 0x81, 0xf8, 0x2a, 0xdd, 0xd2, 0xd5, 0xdf, 0x9e, 0xf4, 0xd3,
	0xc4, 0x03, 0xc3, 0x19, 0xfd, 0x81, 0xc0, 0x15, 0xb9, 0x7a, 0x60, 0xee, 0xba, 0xd2, 0xac, 0x9c,
	0x0a, 0x52, 0xe6, 0x76, 0x76, 0x5d, 0x28, 0x58, 0xa0, 0x73, 0x5d, 0x28, 0xa0, 0x7f, 0x12, 0x18,
	0x4f, 0x9c, 0xcc, 0xe8, 0x96, 0xc2, 0xbd, 0xac, 0xa9, 0xb4, 0x78, 0xbb, 0xb7, 0x64, 0x54, 0xf0,
	0x96, 0x50, 0xb0, 0x4d, 0x5f, 0xd7, 0x73, 0x7d, 0xd5, 0x4b, 0xd8, 0xe1, 0xbf, 0x12, 0x98, 0x48,
	0x5c, 0x2b, 0xe8, 0xc8, 0x96, 0xc2, 0xdd, 0xde, 0x15, 0xaa, 0x66, 0x68, 0x76, 0x4b, 0x28, 0x5c,
	0xa5, 0x5a, 0x3e, 0x85, 0xf4, 0x27, 0x02, 0x10, 0x8d, 0x5b, 0x74, 0x55, 0x65, 0x73, 0xe7, 0xf8,
	0x58, 0x5c, 0xcb, 0x91, 0x81, 0xac, 0xb7, 0x05, 0xeb, 0x2d, 0xba, 0xa9, 0x2b, 0x3f, 0x97, 0x26,
	0x74, 0xe0, 0x3b, 0x02, 0xcf, 0x44, 0x45, 0x03, 0xdb, 0x57, 0x55, 0xce, 0xe5, 0x83, 0x4e, 0x9c,
	0x5f, 0xd9, 0x8a, 0x80, 0x9e, 0xa7, 0x4c, 0x0d, 0x2d, 0x4c, 0x8d, 0xe6, 0x1f, 0xa5, 0xa9, 0xb1,
	0x79, 0x4e, 0x69, 0x6a, 0x7c, 0x36, 0x53, 0x9a, 0x2a, 0x7d, 0x5a, 0x4e, 0x31, 0x35, 0x2a, 0xda,
	0x8d, 0xa9, 0x39, 0xa1, 0x13, 0x07, 0x4a, 0xa5, 0xa9, 0x12, 0xf4, 0xf6, 0x4b, 0x8f, 0xce, 0x4b,
	0xe4, 0xf1, 0x79, 0x89, 0xfc, 0x7d, 0x5e, 0x22, 0x5f, 0x5e, 0x94, 0x06, 0x1e, 0x5f, 0x94, 0x06,
	0x7e, 0xbf, 0x28, 0x0d, 0x7c, 0x30, 0x25, 0x65, 0x7c, 0x22, 0xa7, 0xfb, 0x27, 0x75, 0xee, 0x1d,
	0x0c, 0x89, 0x6f, 0xdf, 0x1b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x54, 0x27, 0x4a, 0x27,
	0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Rule by index.
	Rule(ctx context.Context, in *QueryGetRuleRequest, opts ...grpc.CallOption) (*QueryGetRuleResponse, error)
	// Queries a list of Rule items.
	RuleAll(ctx context.Context, in *QueryAllRuleRequest, opts ...grpc.CallOption) (*QueryAllRuleResponse, error)
	// Queries a Binding by index.
	Binding(ctx context.Context, in *QueryGetBindingRequest, opts ...grpc.CallOption) (*QueryGetBindingResponse, error)
	// Queries a list of Binding items.
	BindingAll(ctx context.Context, in *QueryAllBindingRequest, opts ...grpc.CallOption) (*QueryAllBindingResponse, error)
	// Queries a Relation by index.
	Relation(ctx context.Context, in *QueryGetRelationRequest, opts ...grpc.CallOption) (*QueryGetRelationResponse, error)
	// Queries a list of Relation items.
	RelationAll(ctx context.Context, in *QueryAllRelationRequest, opts ...grpc.CallOption) (*QueryAllRelationResponse, error)
	// Queries a Registration by index.
	Registration(ctx context.Context, in *QueryGetRegistrationRequest, opts ...grpc.CallOption) (*QueryGetRegistrationResponse, error)
	// Queries a list of Registration items.
	RegistrationAll(ctx context.Context, in *QueryAllRegistrationRequest, opts ...grpc.CallOption) (*QueryAllRegistrationResponse, error)
	// Queries a SuspiciousAccountList by index.
	SuspiciousAccountList(ctx context.Context, in *QueryGetSuspiciousAccountListRequest, opts ...grpc.CallOption) (*QueryGetSuspiciousAccountListResponse, error)
	// Queries a list of SuspiciousAccountList items.
	SuspiciousAccountListAll(ctx context.Context, in *QueryAllSuspiciousAccountListRequest, opts ...grpc.CallOption) (*QueryAllSuspiciousAccountListResponse, error)
	// Queries a SpecValues by index.
	SpecValues(ctx context.Context, in *QueryGetSpecValuesRequest, opts ...grpc.CallOption) (*QueryGetSpecValuesResponse, error)
	// Queries a list of SpecValues items.
	SpecValuesAll(ctx context.Context, in *QueryAllSpecValuesRequest, opts ...grpc.CallOption) (*QueryAllSpecValuesResponse, error)
	// Queries a RewardList by index.
	RewardList(ctx context.Context, in *QueryGetRewardListRequest, opts ...grpc.CallOption) (*QueryGetRewardListResponse, error)
	// Queries a list of RewardList items.
	RewardListAll(ctx context.Context, in *QueryAllRewardListRequest, opts ...grpc.CallOption) (*QueryAllRewardListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rule(ctx context.Context, in *QueryGetRuleRequest, opts ...grpc.CallOption) (*QueryGetRuleResponse, error) {
	out := new(QueryGetRuleResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/Rule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RuleAll(ctx context.Context, in *QueryAllRuleRequest, opts ...grpc.CallOption) (*QueryAllRuleResponse, error) {
	out := new(QueryAllRuleResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/RuleAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Binding(ctx context.Context, in *QueryGetBindingRequest, opts ...grpc.CallOption) (*QueryGetBindingResponse, error) {
	out := new(QueryGetBindingResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/Binding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BindingAll(ctx context.Context, in *QueryAllBindingRequest, opts ...grpc.CallOption) (*QueryAllBindingResponse, error) {
	out := new(QueryAllBindingResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/BindingAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Relation(ctx context.Context, in *QueryGetRelationRequest, opts ...grpc.CallOption) (*QueryGetRelationResponse, error) {
	out := new(QueryGetRelationResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/Relation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelationAll(ctx context.Context, in *QueryAllRelationRequest, opts ...grpc.CallOption) (*QueryAllRelationResponse, error) {
	out := new(QueryAllRelationResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/RelationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Registration(ctx context.Context, in *QueryGetRegistrationRequest, opts ...grpc.CallOption) (*QueryGetRegistrationResponse, error) {
	out := new(QueryGetRegistrationResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegistrationAll(ctx context.Context, in *QueryAllRegistrationRequest, opts ...grpc.CallOption) (*QueryAllRegistrationResponse, error) {
	out := new(QueryAllRegistrationResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/RegistrationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuspiciousAccountList(ctx context.Context, in *QueryGetSuspiciousAccountListRequest, opts ...grpc.CallOption) (*QueryGetSuspiciousAccountListResponse, error) {
	out := new(QueryGetSuspiciousAccountListResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/SuspiciousAccountList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuspiciousAccountListAll(ctx context.Context, in *QueryAllSuspiciousAccountListRequest, opts ...grpc.CallOption) (*QueryAllSuspiciousAccountListResponse, error) {
	out := new(QueryAllSuspiciousAccountListResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/SuspiciousAccountListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecValues(ctx context.Context, in *QueryGetSpecValuesRequest, opts ...grpc.CallOption) (*QueryGetSpecValuesResponse, error) {
	out := new(QueryGetSpecValuesResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/SpecValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecValuesAll(ctx context.Context, in *QueryAllSpecValuesRequest, opts ...grpc.CallOption) (*QueryAllSpecValuesResponse, error) {
	out := new(QueryAllSpecValuesResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/SpecValuesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardList(ctx context.Context, in *QueryGetRewardListRequest, opts ...grpc.CallOption) (*QueryGetRewardListResponse, error) {
	out := new(QueryGetRewardListResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/RewardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardListAll(ctx context.Context, in *QueryAllRewardListRequest, opts ...grpc.CallOption) (*QueryAllRewardListResponse, error) {
	out := new(QueryAllRewardListResponse)
	err := c.cc.Invoke(ctx, "/regulatory.regulatory.Query/RewardListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Rule by index.
	Rule(context.Context, *QueryGetRuleRequest) (*QueryGetRuleResponse, error)
	// Queries a list of Rule items.
	RuleAll(context.Context, *QueryAllRuleRequest) (*QueryAllRuleResponse, error)
	// Queries a Binding by index.
	Binding(context.Context, *QueryGetBindingRequest) (*QueryGetBindingResponse, error)
	// Queries a list of Binding items.
	BindingAll(context.Context, *QueryAllBindingRequest) (*QueryAllBindingResponse, error)
	// Queries a Relation by index.
	Relation(context.Context, *QueryGetRelationRequest) (*QueryGetRelationResponse, error)
	// Queries a list of Relation items.
	RelationAll(context.Context, *QueryAllRelationRequest) (*QueryAllRelationResponse, error)
	// Queries a Registration by index.
	Registration(context.Context, *QueryGetRegistrationRequest) (*QueryGetRegistrationResponse, error)
	// Queries a list of Registration items.
	RegistrationAll(context.Context, *QueryAllRegistrationRequest) (*QueryAllRegistrationResponse, error)
	// Queries a SuspiciousAccountList by index.
	SuspiciousAccountList(context.Context, *QueryGetSuspiciousAccountListRequest) (*QueryGetSuspiciousAccountListResponse, error)
	// Queries a list of SuspiciousAccountList items.
	SuspiciousAccountListAll(context.Context, *QueryAllSuspiciousAccountListRequest) (*QueryAllSuspiciousAccountListResponse, error)
	// Queries a SpecValues by index.
	SpecValues(context.Context, *QueryGetSpecValuesRequest) (*QueryGetSpecValuesResponse, error)
	// Queries a list of SpecValues items.
	SpecValuesAll(context.Context, *QueryAllSpecValuesRequest) (*QueryAllSpecValuesResponse, error)
	// Queries a RewardList by index.
	RewardList(context.Context, *QueryGetRewardListRequest) (*QueryGetRewardListResponse, error)
	// Queries a list of RewardList items.
	RewardListAll(context.Context, *QueryAllRewardListRequest) (*QueryAllRewardListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Rule(ctx context.Context, req *QueryGetRuleRequest) (*QueryGetRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rule not implemented")
}
func (*UnimplementedQueryServer) RuleAll(ctx context.Context, req *QueryAllRuleRequest) (*QueryAllRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuleAll not implemented")
}
func (*UnimplementedQueryServer) Binding(ctx context.Context, req *QueryGetBindingRequest) (*QueryGetBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Binding not implemented")
}
func (*UnimplementedQueryServer) BindingAll(ctx context.Context, req *QueryAllBindingRequest) (*QueryAllBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindingAll not implemented")
}
func (*UnimplementedQueryServer) Relation(ctx context.Context, req *QueryGetRelationRequest) (*QueryGetRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relation not implemented")
}
func (*UnimplementedQueryServer) RelationAll(ctx context.Context, req *QueryAllRelationRequest) (*QueryAllRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAll not implemented")
}
func (*UnimplementedQueryServer) Registration(ctx context.Context, req *QueryGetRegistrationRequest) (*QueryGetRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (*UnimplementedQueryServer) RegistrationAll(ctx context.Context, req *QueryAllRegistrationRequest) (*QueryAllRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationAll not implemented")
}
func (*UnimplementedQueryServer) SuspiciousAccountList(ctx context.Context, req *QueryGetSuspiciousAccountListRequest) (*QueryGetSuspiciousAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspiciousAccountList not implemented")
}
func (*UnimplementedQueryServer) SuspiciousAccountListAll(ctx context.Context, req *QueryAllSuspiciousAccountListRequest) (*QueryAllSuspiciousAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspiciousAccountListAll not implemented")
}
func (*UnimplementedQueryServer) SpecValues(ctx context.Context, req *QueryGetSpecValuesRequest) (*QueryGetSpecValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecValues not implemented")
}
func (*UnimplementedQueryServer) SpecValuesAll(ctx context.Context, req *QueryAllSpecValuesRequest) (*QueryAllSpecValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecValuesAll not implemented")
}
func (*UnimplementedQueryServer) RewardList(ctx context.Context, req *QueryGetRewardListRequest) (*QueryGetRewardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardList not implemented")
}
func (*UnimplementedQueryServer) RewardListAll(ctx context.Context, req *QueryAllRewardListRequest) (*QueryAllRewardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardListAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/Rule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rule(ctx, req.(*QueryGetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RuleAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RuleAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/RuleAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RuleAll(ctx, req.(*QueryAllRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Binding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Binding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/Binding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Binding(ctx, req.(*QueryGetBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BindingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BindingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/BindingAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BindingAll(ctx, req.(*QueryAllBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Relation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Relation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/Relation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Relation(ctx, req.(*QueryGetRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/RelationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelationAll(ctx, req.(*QueryAllRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Registration(ctx, req.(*QueryGetRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegistrationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegistrationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/RegistrationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegistrationAll(ctx, req.(*QueryAllRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuspiciousAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuspiciousAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuspiciousAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/SuspiciousAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuspiciousAccountList(ctx, req.(*QueryGetSuspiciousAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuspiciousAccountListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSuspiciousAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuspiciousAccountListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/SuspiciousAccountListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuspiciousAccountListAll(ctx, req.(*QueryAllSuspiciousAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSpecValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/SpecValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecValues(ctx, req.(*QueryGetSpecValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecValuesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpecValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecValuesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/SpecValuesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecValuesAll(ctx, req.(*QueryAllSpecValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/RewardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardList(ctx, req.(*QueryGetRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regulatory.regulatory.Query/RewardListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardListAll(ctx, req.(*QueryAllRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "regulatory.regulatory.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Rule",
			Handler:    _Query_Rule_Handler,
		},
		{
			MethodName: "RuleAll",
			Handler:    _Query_RuleAll_Handler,
		},
		{
			MethodName: "Binding",
			Handler:    _Query_Binding_Handler,
		},
		{
			MethodName: "BindingAll",
			Handler:    _Query_BindingAll_Handler,
		},
		{
			MethodName: "Relation",
			Handler:    _Query_Relation_Handler,
		},
		{
			MethodName: "RelationAll",
			Handler:    _Query_RelationAll_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _Query_Registration_Handler,
		},
		{
			MethodName: "RegistrationAll",
			Handler:    _Query_RegistrationAll_Handler,
		},
		{
			MethodName: "SuspiciousAccountList",
			Handler:    _Query_SuspiciousAccountList_Handler,
		},
		{
			MethodName: "SuspiciousAccountListAll",
			Handler:    _Query_SuspiciousAccountListAll_Handler,
		},
		{
			MethodName: "SpecValues",
			Handler:    _Query_SpecValues_Handler,
		},
		{
			MethodName: "SpecValuesAll",
			Handler:    _Query_SpecValuesAll_Handler,
		},
		{
			MethodName: "RewardList",
			Handler:    _Query_RewardList_Handler,
		},
		{
			MethodName: "RewardListAll",
			Handler:    _Query_RewardListAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regulatory/regulatory/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rule) > 0 {
		for iNdEx := len(m.Rule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BindingName) > 0 {
		i -= len(m.BindingName)
		copy(dAtA[i:], m.BindingName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BindingName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Binding.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Binding) > 0 {
		for iNdEx := len(m.Binding) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Binding[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRelationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRelationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Relation) > 0 {
		for iNdEx := len(m.Relation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegulatoryServiceName) > 0 {
		i -= len(m.RegulatoryServiceName)
		copy(dAtA[i:], m.RegulatoryServiceName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegulatoryServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Registration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Registration) > 0 {
		for iNdEx := len(m.Registration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuspiciousAccountListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuspiciousAccountListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuspiciousAccountListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuspiciousAccountListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuspiciousAccountListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuspiciousAccountListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SuspiciousAccountList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSuspiciousAccountListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSuspiciousAccountListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSuspiciousAccountListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSuspiciousAccountListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSuspiciousAccountListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSuspiciousAccountListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SuspiciousAccountList) > 0 {
		for iNdEx := len(m.SuspiciousAccountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuspiciousAccountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SpecValues.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecValues) > 0 {
		for iNdEx := len(m.SpecValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRewardListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRewardListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRewardListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRewardListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRewardListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRewardListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardList) > 0 {
		for iNdEx := len(m.RewardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rule.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rule) > 0 {
		for _, e := range m.Rule {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BindingName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Binding.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Binding) > 0 {
		for _, e := range m.Binding {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Relation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRelationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRelationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relation) > 0 {
		for _, e := range m.Relation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegulatoryServiceName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Registration.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Registration) > 0 {
		for _, e := range m.Registration {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSuspiciousAccountListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSuspiciousAccountListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SuspiciousAccountList.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSuspiciousAccountListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSuspiciousAccountListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuspiciousAccountList) > 0 {
		for _, e := range m.SuspiciousAccountList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecValues.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSpecValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSpecValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecValues) > 0 {
		for _, e := range m.SpecValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardList.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRewardListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRewardListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardList) > 0 {
		for _, e := range m.RewardList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = append(m.Rule, Rule{})
			if err := m.Rule[len(m.Rule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindingName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindingName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binding = append(m.Binding, Binding{})
			if err := m.Binding[len(m.Binding)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relation = append(m.Relation, Relation{})
			if err := m.Relation[len(m.Relation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegulatoryServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegulatoryServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Registration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registration = append(m.Registration, Registration{})
			if err := m.Registration[len(m.Registration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuspiciousAccountListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuspiciousAccountListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuspiciousAccountListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuspiciousAccountListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuspiciousAccountListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuspiciousAccountListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspiciousAccountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuspiciousAccountList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSuspiciousAccountListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSuspiciousAccountListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSuspiciousAccountListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSuspiciousAccountListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSuspiciousAccountListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSuspiciousAccountListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspiciousAccountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuspiciousAccountList = append(m.SuspiciousAccountList, SuspiciousAccountList{})
			if err := m.SuspiciousAccountList[len(m.SuspiciousAccountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecValues.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecValues = append(m.SpecValues, SpecValues{})
			if err := m.SpecValues[len(m.SpecValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRewardListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRewardListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRewardListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRewardListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRewardListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRewardListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardList = append(m.RewardList, RewardList{})
			if err := m.RewardList[len(m.RewardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
